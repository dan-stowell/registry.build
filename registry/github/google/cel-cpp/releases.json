[{"url":"https://api.github.com/repos/google/cel-cpp/releases/236406842","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/236406842/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/236406842/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.13.0","id":236406842,"author":{"login":"jnthntatum","id":733856,"node_id":"MDQ6VXNlcjczMzg1Ng==","avatar_url":"https://avatars.githubusercontent.com/u/733856?v=4","gravatar_id":"","url":"https://api.github.com/users/jnthntatum","html_url":"https://github.com/jnthntatum","followers_url":"https://api.github.com/users/jnthntatum/followers","following_url":"https://api.github.com/users/jnthntatum/following{/other_user}","gists_url":"https://api.github.com/users/jnthntatum/gists{/gist_id}","starred_url":"https://api.github.com/users/jnthntatum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnthntatum/subscriptions","organizations_url":"https://api.github.com/users/jnthntatum/orgs","repos_url":"https://api.github.com/users/jnthntatum/repos","events_url":"https://api.github.com/users/jnthntatum/events{/privacy}","received_events_url":"https://api.github.com/users/jnthntatum/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4OF0g6","tag_name":"v0.13.0","target_commitish":"master","name":"v0.13.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-07-29T19:39:03Z","published_at":"2025-07-30T21:03:35Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.13.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.13.0","body":"## What's Changed\r\n* Add clarifying notes to CEL codelab exercise 4 solution. by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1595\r\n* Load proto_library and cc_proto_library rules from protobuf and bump minimum version to 28.3 by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1597\r\n* Adding the CEL regex extensions by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1593\r\n* Adding the decls and checker lib to CEL regex extensions by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1600\r\n* Internal Changes by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1611\r\n* Sync copybara script changes. by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1631\r\n* Bump abseil and protobuf versions. by @copybara-service[bot] in https://github.com/google/cel-cpp/pull/1632\r\n\r\n\r\n**Full Changelog**: https://github.com/google/cel-cpp/compare/v0.12.0...v0.13.0"},{"url":"https://api.github.com/repos/google/cel-cpp/releases/231245727","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/231245727/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/231245727/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.12.0","id":231245727,"author":{"login":"jnthntatum","id":733856,"node_id":"MDQ6VXNlcjczMzg1Ng==","avatar_url":"https://avatars.githubusercontent.com/u/733856?v=4","gravatar_id":"","url":"https://api.github.com/users/jnthntatum","html_url":"https://github.com/jnthntatum","followers_url":"https://api.github.com/users/jnthntatum/followers","following_url":"https://api.github.com/users/jnthntatum/following{/other_user}","gists_url":"https://api.github.com/users/jnthntatum/gists{/gist_id}","starred_url":"https://api.github.com/users/jnthntatum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnthntatum/subscriptions","organizations_url":"https://api.github.com/users/jnthntatum/orgs","repos_url":"https://api.github.com/users/jnthntatum/repos","events_url":"https://api.github.com/users/jnthntatum/events{/privacy}","received_events_url":"https://api.github.com/users/jnthntatum/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4NyIef","tag_name":"v0.12.0","target_commitish":"master","name":"v0.12.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-07-09T17:33:16Z","published_at":"2025-07-09T18:50:26Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.12.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.12.0","body":"## Features\r\n\r\n- Added support for subsetting standard library definitions in `TypeChecker` and `Compiler`.\r\n\r\n## Optimizations\r\n\r\n- Value stack was rewritten to reduce value churn cost during evaluation.\r\n\r\n## Bug Fixes\r\n\r\n### Type Checking\r\n\r\n- stdlib definitions that didn't match CEL Spec were removed\r\n- Type inference was updated to correctly handle comprehension results and list(enum)\r\n\r\n### Runtime\r\n\r\n- Added additional checks for malformed ASTs that could lead to undefined behavior.\r\n\r\n## Other\r\n\r\n- Misc portability and compiler warning fixes\r\n- Cleanups / renames\r\n\r\n# Commit Log \r\n\r\n* Optimize `EvaluatorStack` by @copybara-service in https://github.com/google/cel-cpp/pull/1413\r\n* Check for unexpected target (function call receiver) expressions in builtin operator handlers. by @copybara-service in https://github.com/google/cel-cpp/pull/1414\r\n* Optimize `EvaluatorStack` by @copybara-service in https://github.com/google/cel-cpp/pull/1415\r\n* Temporarily allow receiver call structured index calls. by @copybara-service in https://github.com/google/cel-cpp/pull/1416\r\n* Upgrade `ArenaStringPool` to handle `std::string` and `absl::Cord` by @copybara-service in https://github.com/google/cel-cpp/pull/1412\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/1402\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/1401\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/1404\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/1403\r\n* Scrub internal issue reference. by @copybara-service in https://github.com/google/cel-cpp/pull/1420\r\n* Update doc for constant folding to describe behavior when no constant arena is provided. by @copybara-service in https://github.com/google/cel-cpp/pull/1419\r\n* Move conformance testing matchers into separate file to facilitate reuse by @copybara-service in https://github.com/google/cel-cpp/pull/1394\r\n* Rename `NativeTypeId` to `TypeInfo` by @copybara-service in https://github.com/google/cel-cpp/pull/1418\r\n* Remove `TypeManager` forward declarations by @copybara-service in https://github.com/google/cel-cpp/pull/1425\r\n* Fix conformance runner post refactor by @copybara-service in https://github.com/google/cel-cpp/pull/1427\r\n* Add support for converting cel::Type to proto. by @copybara-service in https://github.com/google/cel-cpp/pull/1426\r\n* Make TypeCheckerBuilder::Build() non-destructive. by @copybara-service in https://github.com/google/cel-cpp/pull/1421\r\n* Fix EnumType handling in cel::TypeToProto. by @copybara-service in https://github.com/google/cel-cpp/pull/1435\r\n* Make CompilerBuilder::Build() non-destructive. by @copybara-service in https://github.com/google/cel-cpp/pull/1423\r\n* Make ParserLibrary behave more consistently with CheckerLibrary. by @copybara-service in https://github.com/google/cel-cpp/pull/1424\r\n* Support for declaring a subset to filter definitions from a checker library. by @copybara-service in https://github.com/google/cel-cpp/pull/1422\r\n* Add support for subsetting libraries in CompilerBuilder. by @copybara-service in https://github.com/google/cel-cpp/pull/1438\r\n* Fix a bug where type checker would treat the type assignment for the result of a comprehension as flexible / possible to widen. by @copybara-service in https://github.com/google/cel-cpp/pull/1440\r\n* Add AddUnknownPattern() and AddMissingPattern(). by @copybara-service in https://github.com/google/cel-cpp/pull/1442\r\n* Remove declarations for 'timestamp' and 'duration' as type identifiers. by @copybara-service in https://github.com/google/cel-cpp/pull/1445\r\n* Fix handling for repeated enum fields by @copybara-service in https://github.com/google/cel-cpp/pull/1441\r\n* remove default move constructor declaration for type_registry to fix compiler warning. Intended to be managed as part of a runtime environment managed by a smart pointer. by @copybara-service in https://github.com/google/cel-cpp/pull/1461\r\n* Export exercise4 for codelab. by @copybara-service in https://github.com/google/cel-cpp/pull/1457\r\n* Misc codelab cleanup: by @copybara-service in https://github.com/google/cel-cpp/pull/1458\r\n* Add debug checks for containers unexpectedly returning unknown values by @copybara-service in https://github.com/google/cel-cpp/pull/1462\r\n* Update to setup instructions for codelab. Add a Dockerfile as a reference for setup. by @copybara-service in https://github.com/google/cel-cpp/pull/1465\r\n* Implement C++ utility for CEL field extraction. by @copybara-service in https://github.com/google/cel-cpp/pull/1460\r\n* Migrate the regex_functions extension to the new cel::Value type. by @copybara-service in https://github.com/google/cel-cpp/pull/1459\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/1463\r\n* Automated Code Change by @copybara-service in https://github.com/google/cel-cpp/pull/1467\r\n* Introduce math.sqrt to CEL C++ math extension by @copybara-service in https://github.com/google/cel-cpp/pull/1464\r\n* copybara script updates to better support import. no functional changes. by @copybara-service in https://github.com/google/cel-cpp/pull/1474\r\n* internal by @copybara-service in https://github.com/google/cel-cpp/pull/1480\r\n* Function for conversion of string to bool by @copybara-service in https://github.com/google/cel-cpp/pull/1477\r\n* cel_cc_embed: Open in file in binary mode by @jchadwick-buf in https://github.com/google/cel-cpp/pull/1443\r\n* Dependency fixes for exporting. no functional changes. by @copybara-service in https://github.com/google/cel-cpp/pull/1476\r\n* Avoid nesting status macros by @jchadwick-buf in https://github.com/google/cel-cpp/pull/1450\r\n* Prefer ptrdiff_t over ssize_t by @jchadwick-buf in https://github.com/google/cel-cpp/pull/1448\r\n* Update exercise2 to use the type checker and demonstrate configuring variables. by @copybara-service in https://github.com/google/cel-cpp/pull/1466\r\n* Automated Code Change by @copybara-service in https://github.com/google/cel-cpp/pull/1483\r\n* `ByteString`: Adjust bitfields for MSVC by @jchadwick-buf in https://github.com/google/cel-cpp/pull/1446\r\n* Add utility for formatting type names for display in error messages. by @copybara-service in https://github.com/google/cel-cpp/pull/1486\r\n* Avoid including time_util in time.h by @jchadwick-buf in https://github.com/google/cel-cpp/pull/1485\r\n* internal by @copybara-service in https://github.com/google/cel-cpp/pull/1498\r\n* Check that jump steps were included into the program plan before trying to by @copybara-service in https://github.com/google/cel-cpp/pull/1506\r\n* Add option for using protobuf WKTs as context decl in type checking. by @copybara-service in https://github.com/google/cel-cpp/pull/1449\r\n* Add support for updating variable declaration on cel::TypeCheckerBuilder by @copybara-service in https://github.com/google/cel-cpp/pull/1539\r\n* Add support for injecting a custom attribute matcher. by @copybara-service in https://github.com/google/cel-cpp/pull/1536\r\n* Update type checker decls for extension packages. by @copybara-service in https://github.com/google/cel-cpp/pull/1540\r\n* Fix parts of CEL C++ to be more compatible with Windows-based toolchains by @copybara-service in https://github.com/google/cel-cpp/pull/1553\r\n* Fix typo: \"AddConatainerOps\" to \"AddContainerOps\". by @copybara-service in https://github.com/google/cel-cpp/pull/1578\r\n* Add RegexCheckerLibrary for regex functions by @copybara-service in https://github.com/google/cel-cpp/pull/1555\r\n* Suppress gcc warning for direct memory write in value_variant.h. by @copybara-service in https://github.com/google/cel-cpp/pull/1583\r\n* Add ListsCheckerLibrary for list functions by @copybara-service in https://github.com/google/cel-cpp/pull/1565\r\n* Fix a typo in the description of IsDone() method. by @copybara-service in https://github.com/google/cel-cpp/pull/1590\r\n* Add CompilerLibraries for lists and strings extensions. by @copybara-service in https://github.com/google/cel-cpp/pull/1579\r\n* Suppress clang warning for direct memory write in value_variant.h. by @copybara-service in https://github.com/google/cel-cpp/pull/1594\r\n\r\n\r\n**Full Changelog**: https://github.com/google/cel-cpp/compare/v0.11.0...v0.12.0","mentions_count":1},{"url":"https://api.github.com/repos/google/cel-cpp/releases/210232641","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/210232641/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/210232641/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.11.0","id":210232641,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4Mh-VB","tag_name":"v0.11.0","target_commitish":"master","name":"Release v0.11.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-04-03T21:12:28Z","published_at":"2025-04-03T22:26:38Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.11.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.11.0","body":"## **Release v0.11.0**\r\n\r\n### **Breaking Changes**\r\n\r\nThis release includes significant breaking changes, notably switching the underlying protobuf definitions from google.api.expr to the canonical dev.cel protos. Additionally, the Reserve() method has been removed from MutableRepeatedFieldRef in the reflection utilities.\r\n\r\n* [#1019](https://github.com/google/cel-cpp/pull/1019): Breaking change: Use dev.cel (canonical) protos instead of google.api.expr  \r\n* [#1112](https://github.com/google/cel-cpp/pull/1112): Breaking change: Remove MutableRepeatedFieldRef::Reserve() in reflection\r\n\r\n### **Core Value System, Memory Management, and Internals Refactoring**\r\n\r\nA major focus was on refactoring the core value types, memory management, and internal representations. This involved removing the ValueManager, consolidating type providers, overhauling arena and message factory propagation, removing legacy type reflectors and builders, introducing hand-rolled variants for cel::Value, ListValue, MapValue, and StructValue for better performance and control, refining the ByteString implementation, adding ZeroCopyInputStream/OutputStream, devirtualizing cel::Data, finalizing parts of the Value API, and cleaning up legacy value handling. Dispatch tables were added for custom value types to improve extensibility.\r\n\r\n* [#1014](https://github.com/google/cel-cpp/pull/1014): Remove dependency on getting list/map value builders from factory/managers  \r\n* [#1023](https://github.com/google/cel-cpp/pull/1023): Overhaul propagation of arenas and message factories  \r\n* [#1025](https://github.com/google/cel-cpp/pull/1025): Remove TypeFactory from TypeIntrospector  \r\n* [#1027](https://github.com/google/cel-cpp/pull/1027): Consolidate type providers into two: one for legacy and one for modern  \r\n* [#1028](https://github.com/google/cel-cpp/pull/1028): Remove the usage of type reflectors for optional types  \r\n* [#1065](https://github.com/google/cel-cpp/pull/1065): Reject legacy runtime type values with empty typenames when converting to  \r\n* [#1076](https://github.com/google/cel-cpp/pull/1076): Improve error messages for Value type casting errors.  \r\n* [#1157](https://github.com/google/cel-cpp/pull/1157): Remove references to now unused option use\\_legacy\\_container\\_builders.  \r\n* [#1174](https://github.com/google/cel-cpp/pull/1174): Remove usages of native JSON and Any representations  \r\n* [#1177](https://github.com/google/cel-cpp/pull/1177): Rename Parsed{List,Map,Struct}Value to Custom{List,Map,Struct}Value  \r\n* [#1186](https://github.com/google/cel-cpp/pull/1186): Migrate includes from base/kind.h to common/kind.h  \r\n* [#1196](https://github.com/google/cel-cpp/pull/1196): Remove now unused native JSON types  \r\n* [#1236](https://github.com/google/cel-cpp/pull/1236): Remove ValueManager& from NewIterator()  \r\n* [#1251](https://github.com/google/cel-cpp/pull/1251): Remove ValueManager 1  \r\n* [#1254](https://github.com/google/cel-cpp/pull/1254): Remove ValueManager from Activation  \r\n* [#1255](https://github.com/google/cel-cpp/pull/1255): Remove ValueManager from TraceableProgram::Trace.  \r\n* [#1258](https://github.com/google/cel-cpp/pull/1258): Remove ValueManager  \r\n* [#1263](https://github.com/google/cel-cpp/pull/1263): Delete cel::common\\_internal::DataInterface  \r\n* [#1269](https://github.com/google/cel-cpp/pull/1269): Add ZeroCopyInputStream and ZeroCopyOutputStream for BytesValue  \r\n* [#1274](https://github.com/google/cel-cpp/pull/1274): Update common\\_internal::ByteString  \r\n* [#1275](https://github.com/google/cel-cpp/pull/1275): Add debug checks for valid duration and timestamp  \r\n* [#1280](https://github.com/google/cel-cpp/pull/1280): Add missing common\\_internal::ByteString::Clone  \r\n* [#1281](https://github.com/google/cel-cpp/pull/1281): Migrate from common\\_internal::SharedByteString to common\\_internal::ByteString  \r\n* [#1295](https://github.com/google/cel-cpp/pull/1295): Do not clear the constant folding arena  \r\n* [#1296](https://github.com/google/cel-cpp/pull/1296): Finalize more parts of the Value API  \r\n* [#1297](https://github.com/google/cel-cpp/pull/1297): Cleanup Legacy values  \r\n* [#1298](https://github.com/google/cel-cpp/pull/1298): Cleanup Legacy values  \r\n* [#1299](https://github.com/google/cel-cpp/pull/1299): Cleanup Legacy values  \r\n* [#1302](https://github.com/google/cel-cpp/pull/1302): Finalize TypeValue  \r\n* [#1303](https://github.com/google/cel-cpp/pull/1303): absl::Cord& \\-\\> absl::Nonnull\\<absl::Cord\\*\\>  \r\n* [#1306](https://github.com/google/cel-cpp/pull/1306): Drop cel::Value back down to 32 bytes  \r\n* [#1307](https://github.com/google/cel-cpp/pull/1307): Devirtualize cel::Data  \r\n* [#1308](https://github.com/google/cel-cpp/pull/1308): cel::Value::Clone(Allocator\\<\\>) \\-\\> cel::Value::Clone(absl::Nonnull\\<google::protobuf::Arena\\*\\>)  \r\n* [#1311](https://github.com/google/cel-cpp/pull/1311): Switch from cel::Shared\\<T\\> to cel::Owned\\<T\\>  \r\n* [#1312](https://github.com/google/cel-cpp/pull/1312): Delete Shared and SharedView  \r\n* [#1323](https://github.com/google/cel-cpp/pull/1323): Fix handling of invalid values with optional elements/entries/fields  \r\n* [#1325](https://github.com/google/cel-cpp/pull/1325): Fix error value handling in create map/struct  \r\n* [#1327](https://github.com/google/cel-cpp/pull/1327): Add dispatch table support for CustomStructValue  \r\n* [#1334](https://github.com/google/cel-cpp/pull/1334): Add dispatch table support for CustomListValue  \r\n* [#1335](https://github.com/google/cel-cpp/pull/1335): Add dispatch table support for OpaqueValue  \r\n* [#1340](https://github.com/google/cel-cpp/pull/1340): Add dispatch table support for CustomMapValue  \r\n* [#1349](https://github.com/google/cel-cpp/pull/1349): Drop reference counting support from protobuf related values  \r\n* [#1350](https://github.com/google/cel-cpp/pull/1350): Remove assignment operators  \r\n* [#1352](https://github.com/google/cel-cpp/pull/1352): Implement hand-rolled variant for cel::Value  \r\n* [#1354](https://github.com/google/cel-cpp/pull/1354): Implement hand-rolled variant for cel::ListValue  \r\n* [#1355](https://github.com/google/cel-cpp/pull/1355): Implement hand-rolled variant for cel::MapValue  \r\n* [#1356](https://github.com/google/cel-cpp/pull/1356): Implement hand-rolled variant for cel::StructValue  \r\n* [#1364](https://github.com/google/cel-cpp/pull/1364): Remove manual construction workaround from TypeValue  \r\n* [#1375](https://github.com/google/cel-cpp/pull/1375): Redo ArenaString  \r\n* [#1376](https://github.com/google/cel-cpp/pull/1376): Remove common\\_internal::ByteStringView  \r\n* [#1377](https://github.com/google/cel-cpp/pull/1377): Value::SerializeTo(..., absl::Cord\\*) \\-\\> Value::SerializeTo(..., ZeroCopyOutputStream\\*)  \r\n* [#1382](https://github.com/google/cel-cpp/pull/1382): Lock down custom value interfaces  \r\n* [#1400](https://github.com/google/cel-cpp/pull/1400): Check for in-range timestamp and duration values in Value conversion.\r\n\r\n### **Type Checker Enhancements & Fixes**\r\n\r\nThe type checker received several updates, including support for declaring an overall expected expression type, improved type widening logic to align with Go/Java, better handling of function declarations in conformance tests, support for iter\\_var2 in comprehensions, options for input size limits, filtering of bad line information, improved error reporting for type deduction failures, support for declaring context messages, and integration with an optional protobuf Arena instance. The builder pattern was also refined.\r\n\r\n* [#1009](https://github.com/google/cel-cpp/pull/1009): Add support for declaring an overall expected type to the type checker.  \r\n* [#1020](https://github.com/google/cel-cpp/pull/1020): Fix forwarding checker options from CreateTypeCheckerBuilder overload.  \r\n* [#1031](https://github.com/google/cel-cpp/pull/1031): Update type assignment widening behavior to more closely follow the 'MoreGeneral' check in the Go and Java implementations.  \r\n* [#1032](https://github.com/google/cel-cpp/pull/1032): Update conformance to correctly handle applying function declarations from the test file to the TypeCheckerBuilder.  \r\n* [#1046](https://github.com/google/cel-cpp/pull/1046): Update type checker to handle iter\\_var2  \r\n* [#1069](https://github.com/google/cel-cpp/pull/1069): Add option to set input expression size limit in type checker.  \r\n* [#1072](https://github.com/google/cel-cpp/pull/1072): TypeChecker updates to filter bad line information.  \r\n* [#1073](https://github.com/google/cel-cpp/pull/1073): Refactor factory functions for TypeCheckerBuilders.  \r\n* [#1074](https://github.com/google/cel-cpp/pull/1074): Make TypeCheckerBuilder class abstract.  \r\n* [#1075](https://github.com/google/cel-cpp/pull/1075): Update type checker to fail (return a status) if it fails to deduce the type of subexpression.  \r\n* [#1077](https://github.com/google/cel-cpp/pull/1077): Checker support for declaring context messages.  \r\n* [#1081](https://github.com/google/cel-cpp/pull/1081): Add support for type checker type deduction conformance tests.  \r\n* [#1309](https://github.com/google/cel-cpp/pull/1309): Add an optional protobuf Arena tied to TypeCheckerBuilder instances.\r\n\r\n### **Compiler, Planner & Execution Optimizations**\r\n\r\nNew cel::Compiler interfaces were introduced, along with initial implementations and support for optionals. Performance was improved through specialized implementations for common operators (\\!\\_, @not\\_strictly\\_false, \\==, \\!=, @in), optimized string/bytes operations (concatenation, startsWith, endsWith, contains), optimized evaluator stack access, memoized enum lookups, reduced temporary allocations in the planner, optimized program builder bookkeeping, and direct visitor calls instead of std::invoke. Fixes were made for slot calculations and error handling in the planner.\r\n\r\n* [#1042](https://github.com/google/cel-cpp/pull/1042): Add interfaces and initial implementation for cel::Compiler.  \r\n* [#1057](https://github.com/google/cel-cpp/pull/1057): Add compiler library for optionals.  \r\n* [#1059](https://github.com/google/cel-cpp/pull/1059): Fix for slot calculation for block expressions.  \r\n* [#1068](https://github.com/google/cel-cpp/pull/1068): Update helper class for managing AST traversal.  \r\n* [#1071](https://github.com/google/cel-cpp/pull/1071): Add missing return statements after errors in C++ planner.  \r\n* [#1170](https://github.com/google/cel-cpp/pull/1170): Add specialized implementations for \\==/\\!=/@in.  \r\n* [#1171](https://github.com/google/cel-cpp/pull/1171): Default to using specialized implementation for some builtins.  \r\n* [#1176](https://github.com/google/cel-cpp/pull/1176): Add specialized impls for \\!\\_ and @not\\_strictly\\_false  \r\n* [#1216](https://github.com/google/cel-cpp/pull/1216): Add recursive implementation for cel.@block.  \r\n* [#1358](https://github.com/google/cel-cpp/pull/1358): Make \\<string\\>.startsWith, \\<string\\>.endsWith, and \\<string\\>.contains cheap again  \r\n* [#1359](https://github.com/google/cel-cpp/pull/1359): Implement optimized string and bytes concatenation  \r\n* [#1365](https://github.com/google/cel-cpp/pull/1365): Avoid std::invoke and just directly call visitors to avoid ugly frames in pprof  \r\n* [#1373](https://github.com/google/cel-cpp/pull/1373): Memoize enum lookup table in FlatExprBuilder. Switch to using fully qualified name only instead of precomputing all possible ways to reference.  \r\n* [#1374](https://github.com/google/cel-cpp/pull/1374): Add benchmarks for enum resolution for the expression builder.  \r\n* [#1385](https://github.com/google/cel-cpp/pull/1385): Optimize EvaluatorStack  \r\n* [#1386](https://github.com/google/cel-cpp/pull/1386): Remove temporary vectors in resolver logic for the planner.  \r\n* [#1388](https://github.com/google/cel-cpp/pull/1388): Avoid pointer indirection to access stacks  \r\n* [#1390](https://github.com/google/cel-cpp/pull/1390): Validate that select expression specifies an operand in FlatExprBuilder.  \r\n* [#1391](https://github.com/google/cel-cpp/pull/1391): Add additional test case for constant folding.  \r\n* [#1392](https://github.com/google/cel-cpp/pull/1392): Optimize bookkeeping in the program builder:  \r\n* [#1393](https://github.com/google/cel-cpp/pull/1393): Add accessors for underlying parser / type checker on cel::Compiler interface.  \r\n* [#1398](https://github.com/google/cel-cpp/pull/1398): Inline Value::GetBool and Value::AsBool\r\n\r\n### **Parser & AST Handling**\r\n\r\nThe parser implementation was refactored to build a non-protobuf SourceInfo first before converting. AST conversion logic was updated for iter\\_var2, moved into the common directory, and cleaned up. Support for quoted field selectors was added.\r\n\r\n* [#1039](https://github.com/google/cel-cpp/pull/1039): Refactor parser implementation to build non-proto version of SourceInfo then convert to proto.  \r\n* [#1044](https://github.com/google/cel-cpp/pull/1044): Update AST conversion to support iter\\_var2  \r\n* [#1150](https://github.com/google/cel-cpp/pull/1150): Add support for quoted field selectors.  \r\n* [#1324](https://github.com/google/cel-cpp/pull/1324): Move base/ast\\_internal definitions to common/ast  \r\n* [#1326](https://github.com/google/cel-cpp/pull/1326): Cleanup references to ast\\_internal:: aliases to cel::Expr and related types.  \r\n* [#1328](https://github.com/google/cel-cpp/pull/1328): Remove declarations for internal functions exposed for testing in ext/protobuf/ast\\_converters.  \r\n* [#1329](https://github.com/google/cel-cpp/pull/1329): Move CEL-C++ sourceinfo to proto conversion to common/ast.  \r\n* [#1330](https://github.com/google/cel-cpp/pull/1330): Move ast conversion from extensions/protobuf to common. Update signature to match other protobuf utilities *ToProto(const T&, U* out);  \r\n* [#1331](https://github.com/google/cel-cpp/pull/1331): Remove references to old ast\\_conversion utilities.\r\n\r\n### **Comprehensions & Macros**\r\n\r\nSignificant work was done on comprehensions and macros, including an initial implementation of Comprehensions V2, hardening against \\_\\_result\\_\\_ usage, adding an option to configure the accumulator variable name (and defaulting to the new variable), fixing bugs related to recursive comprehensions, updating macros to use iterators and respect the configured accumulator variable name, improving list append optimization checks, and providing configuration examples. The older three-argument filter macro was removed.\r\n\r\n* [#1047](https://github.com/google/cel-cpp/pull/1047): Harden builtin macros against usages of \\_\\_result\\_\\_  \r\n* [#1051](https://github.com/google/cel-cpp/pull/1051): Initial minimal implementation of Comprehensions V2  \r\n* [#1085](https://github.com/google/cel-cpp/pull/1085): Fix bug when accessing iterator variables when using recursive comprehensions  \r\n* [#1086](https://github.com/google/cel-cpp/pull/1086): Make check for optimizeable list append more strict.  \r\n* [#1113](https://github.com/google/cel-cpp/pull/1113): Add option for changing the comprehension accumulator variable used by standard macros.  \r\n* [#1118](https://github.com/google/cel-cpp/pull/1118): Opt parser tests into new accumulator var ahead of default enabling.  \r\n* [#1119](https://github.com/google/cel-cpp/pull/1119): Default enable new accumulator variable.  \r\n* [#1125](https://github.com/google/cel-cpp/pull/1125): Update comprehension v2 macros to follow the accu var name option.  \r\n* [#1126](https://github.com/google/cel-cpp/pull/1126): Update internal tests to opt in to new accumulator variable ahead of default enabling.  \r\n* [#1214](https://github.com/google/cel-cpp/pull/1214): Update standard macro expanders to give a more stable numbering across compilers/compiler options.  \r\n* [#1222](https://github.com/google/cel-cpp/pull/1222): Update extension sortBy macro to use the configured name for accumulator variable instead of a constant 'result'.  \r\n* [#1313](https://github.com/google/cel-cpp/pull/1313): Add example for configuring macros with cel::CompilerBuilder.  \r\n* [#1353](https://github.com/google/cel-cpp/pull/1353): Use return-by-address overload in comprehension next  \r\n* [#1387](https://github.com/google/cel-cpp/pull/1387): Update comprehensions to use iterators  \r\n* [#1389](https://github.com/google/cel-cpp/pull/1389): Reimplement ComprehensionSlots to preserve pointer stability  \r\n* [#1399](https://github.com/google/cel-cpp/pull/1399): Remove \\<map\\_or\\_list\\>.filter(\\<iter\\>, \\<iter2\\>, \\<expr\\>)\r\n\r\n### **Extension Functions**\r\n\r\nNew extension functions were added, including upperAscii() for strings and the 'lists' extension library. Existing extensions (math, encoder, JSON-related) were refactored, and type checker declarations were added. Optional unwrap functions were implemented. Handling for special-cased functions was standardized.\r\n\r\n* [#1055](https://github.com/google/cel-cpp/pull/1055): Refactor JSON-related well known types  \r\n* [#1058](https://github.com/google/cel-cpp/pull/1058): Add declarations for string extension functions.  \r\n* [#1060](https://github.com/google/cel-cpp/pull/1060): Introduce upperAscii() string extension function  \r\n* [#1061](https://github.com/google/cel-cpp/pull/1061): Refactor extensions/math\\_ext to use register helpers for function bindings.  \r\n* [#1062](https://github.com/google/cel-cpp/pull/1062): Add type checker declarations for the math extension library.  \r\n* [#1063](https://github.com/google/cel-cpp/pull/1063): Add checker declarations for encoder extensions.  \r\n* [#1115](https://github.com/google/cel-cpp/pull/1115): Implement the 'lists' extension for the C++ runtime.  \r\n* [#1158](https://github.com/google/cel-cpp/pull/1158): Refactor and standardize handling for special cased functions.  \r\n* [#1211](https://github.com/google/cel-cpp/pull/1211): Implement optional.unwrap() and .unwrapOpt() functions.\r\n\r\n### **Protobuf & Descriptor Handling**\r\n\r\nImprovements were made to descriptor pool management, including ensuring mandatory messages are linked, making the minimal pool public, adding helpers for consistent pool building, and exposing the minimal set as a DescriptorDatabase. Proto conversion utilities were consolidated.\r\n\r\n* [#1024](https://github.com/google/cel-cpp/pull/1024): Ensure mandatory messages are linked with the generated descriptor pool  \r\n* [#1026](https://github.com/google/cel-cpp/pull/1026): Make the minimal descriptor pool public  \r\n* [#1305](https://github.com/google/cel-cpp/pull/1305): Consolidate conversion code from proto messages to cel::Type and cel::VariableDecl into common/decl\\_proto\\* and common/type\\_proto\\*.  \r\n* [#1337](https://github.com/google/cel-cpp/pull/1337): Expose minimal descriptor set as google::protobuf::DescriptorDatabase  \r\n* [#1338](https://github.com/google/cel-cpp/pull/1338): Remove unnecessary dependency on cel\\_proto\\_wrap\\_util.  \r\n* [#1351](https://github.com/google/cel-cpp/pull/1351): Add helper for building consistent descriptor pool.\r\n\r\n### **General Refactoring, Fixes & Cleanups**\r\n\r\nThis category includes various smaller fixes, cleanups, and refactoring efforts such as adding annotations, removing dead code and cruft, renaming functions, fixing compiler warnings, improving error messages, adding comparison operators for sorting, moving files and updating includes, adjusting code visibility, cleaning up comments, updating internal codelabs, fixing sync issues, and updating to a newer cel-spec version. A helper for formatting validation errors was also added.\r\n\r\n* [#1029](https://github.com/google/cel-cpp/pull/1029): Add a \\[\\[maybe\\_unused\\]\\] annotation  \r\n* [#1040](https://github.com/google/cel-cpp/pull/1040): Remove deadcode  \r\n* [#1049](https://github.com/google/cel-cpp/pull/1049): Rename StandardLibrary() to StandardCheckerLibrary().  \r\n* [#1050](https://github.com/google/cel-cpp/pull/1050): Fix gcc warning about shadowing base class virtual overload.  \r\n* [#1066](https://github.com/google/cel-cpp/pull/1066): Fix misleading error on string \\-\\> uint conversion.  \r\n* [#1078](https://github.com/google/cel-cpp/pull/1078): internal codelab updates  \r\n* [#1116](https://github.com/google/cel-cpp/pull/1116): Add operator\\<() for timestamp, duration and bytes to enable sorting.  \r\n* [#1208](https://github.com/google/cel-cpp/pull/1208): Update includes to refer to new locations /common/function\\_descriptor.h and /runtime/function.h.  \r\n* [#1304](https://github.com/google/cel-cpp/pull/1304): Check for timestamp out of range for timestamp(int) function.  \r\n* [#1310](https://github.com/google/cel-cpp/pull/1310): Add a helper for formatting errors in a ValidationResult.  \r\n* [#1405](https://github.com/google/cel-cpp/pull/1405): Update to cel-spec 0.23.0\r\n\r\n## **New Contributors**\r\n\r\n* @jchadwick-buf made their first contribution in [https://github.com/google/cel-cpp/pull/834](https://github.com/google/cel-cpp/pull/834)\r\n\r\nFull Changelog: [https://github.com/google/cel-cpp/compare/v0.10.0...v0.11.0](https://github.com/google/cel-cpp/compare/v0.10.0...v0.11.0)","mentions_count":3},{"url":"https://api.github.com/repos/google/cel-cpp/releases/181985228","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/181985228/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/181985228/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.10.0","id":181985228,"author":{"login":"jnthntatum","id":733856,"node_id":"MDQ6VXNlcjczMzg1Ng==","avatar_url":"https://avatars.githubusercontent.com/u/733856?v=4","gravatar_id":"","url":"https://api.github.com/users/jnthntatum","html_url":"https://github.com/jnthntatum","followers_url":"https://api.github.com/users/jnthntatum/followers","following_url":"https://api.github.com/users/jnthntatum/following{/other_user}","gists_url":"https://api.github.com/users/jnthntatum/gists{/gist_id}","starred_url":"https://api.github.com/users/jnthntatum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnthntatum/subscriptions","organizations_url":"https://api.github.com/users/jnthntatum/orgs","repos_url":"https://api.github.com/users/jnthntatum/repos","events_url":"https://api.github.com/users/jnthntatum/events{/privacy}","received_events_url":"https://api.github.com/users/jnthntatum/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4K2N_M","tag_name":"v0.10.0","target_commitish":"1d852db6620dd679b294fa40b09932c8d57ebc55","name":"v0.10.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-10-24T20:49:49Z","published_at":"2024-10-25T16:55:20Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.10.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.10.0","body":"Release covering updates over the last year including recent refactors for the updated Value type and initial implementation of type checker.\r\n\r\nNote: Upcoming changes after this release will migrate many references to protobuf Message types to the canonical versions in CEL spec and will likely require client updates.\r\n\r\n## What's Changed\r\n* Add support for managing modern type providers in the CEL type registry. by @copybara-service in https://github.com/google/cel-cpp/pull/183\r\n* Add accessors for extracting legacy type from cel::LegacyStructType. by @copybara-service in https://github.com/google/cel-cpp/pull/186\r\n* Patch of https://github.com/google/cel-cpp/pull/188 to support BUILD environment customization. by @copybara-service in https://github.com/google/cel-cpp/pull/193\r\n* Remove unused functions from evaluator core. by @copybara-service in https://github.com/google/cel-cpp/pull/203\r\n* Split flat expression evaluator implementation from implementation of the legacy CelExpression interface. by @copybara-service in https://github.com/google/cel-cpp/pull/204\r\n* IWYU fixes for attribute trail. by @copybara-service in https://github.com/google/cel-cpp/pull/215\r\n* Update CEL C++ grammar to recognize but reject optional by @copybara-service in https://github.com/google/cel-cpp/pull/221\r\n* Remove direct interop usages from flat_expr_builder. by @copybara-service in https://github.com/google/cel-cpp/pull/222\r\n* Fix internal comment scrubbing using wrong tags. by @copybara-service in https://github.com/google/cel-cpp/pull/233\r\n* Fixed the reference to CelExpression::Trace in the documentation for CelEvaluationListener. by @copybara-service in https://github.com/google/cel-cpp/pull/234\r\n* Implement partial support for setting repeated and map value `google.protobuf.Any` fields in `ProtoStructValueBuilder` by @copybara-service in https://github.com/google/cel-cpp/pull/236\r\n* Partially migrate create_list_step. by @copybara-service in https://github.com/google/cel-cpp/pull/249\r\n* Add modern value implementation of mutable list for map/filter list builder optimization. by @copybara-service in https://github.com/google/cel-cpp/pull/250\r\n* Add utilities for creating `google.protobuf.Any.type_url` by @copybara-service in https://github.com/google/cel-cpp/pull/259\r\n* Move arithmetic operators to runtime/standard. by @copybara-service in https://github.com/google/cel-cpp/pull/267\r\n* Add protocol buffer message encoding utility class by @copybara-service in https://github.com/google/cel-cpp/pull/268\r\n* Add optimized program plan step for the select optimization. by @copybara-service in https://github.com/google/cel-cpp/pull/247\r\n* Add generic implementation of `ConvertToAny` and `ConvertToJson` for `list` and `map` by @copybara-service in https://github.com/google/cel-cpp/pull/278\r\n* Refactor comprehension planning in flat expr builder to use comprehension specific visitor callbacks. by @copybara-service in https://github.com/google/cel-cpp/pull/293\r\n* Simplify value stack operations for comprehensions. by @copybara-service in https://github.com/google/cel-cpp/pull/295\r\n* Migrate in functions to use Handles. by @copybara-service in https://github.com/google/cel-cpp/pull/303\r\n* Move error factories from eval/internal to runtime/internal by @copybara-service in https://github.com/google/cel-cpp/pull/304\r\n* Prepare to migrate `create_struct_step.cc` for map by @copybara-service in https://github.com/google/cel-cpp/pull/316\r\n* - Add support for checked downcast on runtime to support extensions. by @copybara-service in https://github.com/google/cel-cpp/pull/287\r\n* Update signature of `MapValue::Has` to include `ValueFactory&` by @copybara-service in https://github.com/google/cel-cpp/pull/325\r\n* Add end to end tests for modern protobuf type provider impl. by @copybara-service in https://github.com/google/cel-cpp/pull/327\r\n* Fully implement optional syntax for parser by @copybara-service in https://github.com/google/cel-cpp/pull/338\r\n* Add cel::Value and cel::Activation equivalent of the bind context to activation helper. by @copybara-service in https://github.com/google/cel-cpp/pull/341\r\n* More `cel::Macro` cleanup by @copybara-service in https://github.com/google/cel-cpp/pull/348\r\n* Export kPayloadUrlMissingAttributePath to public header. by @copybara-service in https://github.com/google/cel-cpp/pull/350\r\n* Introduce Issue and IssueCollector types for collecting issues encountered during expression planning. by @copybara-service in https://github.com/google/cel-cpp/pull/356\r\n* Update `Kind`, `TypeKind`, and `NativeTypeId` by @copybara-service in https://github.com/google/cel-cpp/pull/367\r\n* Add exception macros by @copybara-service in https://github.com/google/cel-cpp/pull/374\r\n* Add to proto function for cel::Ast. by @copybara-service in https://github.com/google/cel-cpp/pull/368\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/378\r\n* Internal change by @copybara-service in https://github.com/google/cel-cpp/pull/380\r\n* `DoubleType` and `DoubleTypeView` by @copybara-service in https://github.com/google/cel-cpp/pull/390\r\n* `DurationType` and `DurationTypeView` by @copybara-service in https://github.com/google/cel-cpp/pull/392\r\n* Add `benchmark` tag to `sets_functions_benchmark_test` by @copybara-service in https://github.com/google/cel-cpp/pull/406\r\n* `IntValue` and `IntValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/419\r\n* Use `absl::Span` for returns in attributes by @copybara-service in https://github.com/google/cel-cpp/pull/426\r\n* `TimestampValue` and `TimestampValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/421\r\n* Delete unused `base/type_registry.h` by @copybara-service in https://github.com/google/cel-cpp/pull/429\r\n* `UnknownValue` and `UnknownValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/428\r\n* Remove ability to modify `EnumType` equality and hashing by @copybara-service in https://github.com/google/cel-cpp/pull/432\r\n* Add least and greatest macros for Math extension library by @copybara-service in https://github.com/google/cel-cpp/pull/431\r\n* Rework `OpaqueType` and `OpaqueTypeView` by @copybara-service in https://github.com/google/cel-cpp/pull/434\r\n* Allow `Type` to be default constructible by @copybara-service in https://github.com/google/cel-cpp/pull/436\r\n* Allow `Value` to be default constructible by @copybara-service in https://github.com/google/cel-cpp/pull/437\r\n* Add `TypeFactory` by @copybara-service in https://github.com/google/cel-cpp/pull/439\r\n* Update Qualify interface to optionally return the number of qualifiers applied. by @copybara-service in https://github.com/google/cel-cpp/pull/405\r\n* `MapValue` and `MapValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/454\r\n* Allow `OptionalType` to be default constructed by @copybara-service in https://github.com/google/cel-cpp/pull/456\r\n* Improve hashing of `Type`, `TypeView`, and friends by @copybara-service in https://github.com/google/cel-cpp/pull/460\r\n* Refactor `CommonTypes` to `ProcessLocalTypeCache` by @copybara-service in https://github.com/google/cel-cpp/pull/458\r\n* Prevent binding to temporaries in `TypeView` and friends by @copybara-service in https://github.com/google/cel-cpp/pull/461\r\n* `OpaqueValue`, `OpaqueValueView`, `OptionalValue`, and `OptionalValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/457\r\n* Attach modern runtime to conformance tests with noisy test failures. Update skip list for failing tests. by @copybara-service in https://github.com/google/cel-cpp/pull/464\r\n* Add navigable_ast utility for AST analysis. by @copybara-service in https://github.com/google/cel-cpp/pull/462\r\n* Update type cache to return views by @copybara-service in https://github.com/google/cel-cpp/pull/466\r\n* Store cached optionals separate from opaques for efficiency by @copybara-service in https://github.com/google/cel-cpp/pull/467\r\n* Move default optional value to `ProcessLocalValueCache` by @copybara-service in https://github.com/google/cel-cpp/pull/468\r\n* Update protobuf type adapter to support select optimization through map and repeated fields. by @copybara-service in https://github.com/google/cel-cpp/pull/438\r\n* Update `ValueView` and friends to avoid binding to temporaries by @copybara-service in https://github.com/google/cel-cpp/pull/469\r\n* Add support for pre/post order traversals on NavigableExpr. by @copybara-service in https://github.com/google/cel-cpp/pull/465\r\n* Add stringifiers for Navigable AST enums. by @copybara-service in https://github.com/google/cel-cpp/pull/473\r\n* Allow `Shared`, `SharedView`, and `Unqiue` to be default constructed by @copybara-service in https://github.com/google/cel-cpp/pull/472\r\n* Refactor value deserialization to be handle agnostic by @copybara-service in https://github.com/google/cel-cpp/pull/474\r\n* Refactor value serialization to be handle agnostic by @copybara-service in https://github.com/google/cel-cpp/pull/475\r\n* Default enable unique numbering in C++ CEL parser for built-in macro accumulator vars. Previously, all Expr nodes representing the internal accu_var '__result__' shared the same ID in a given comprehension. by @copybara-service in https://github.com/google/cel-cpp/pull/453\r\n* Refactor `TypeFactory`, `TypeCache`, and `ValueCache` by @copybara-service in https://github.com/google/cel-cpp/pull/477\r\n* Rename `memory_manager()` to `GetMemoryManager()` by @copybara-service in https://github.com/google/cel-cpp/pull/478\r\n* Introduce `ValueFactory` by @copybara-service in https://github.com/google/cel-cpp/pull/479\r\n* Add benchmarks for bind expressions. by @copybara-service in https://github.com/google/cel-cpp/pull/483\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/459\r\n* Update slot indexing to use a manager rather than assuming 2 slots per comprehension. by @copybara-service in https://github.com/google/cel-cpp/pull/484\r\n* Add ability to perform serialization size calculations without serializing by @copybara-service in https://github.com/google/cel-cpp/pull/485\r\n* `BoolValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/486\r\n* `ErrorValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/487\r\n* `UnknownValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/488\r\n* `NullValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/489\r\n* `BytesValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/490\r\n* `DoubleValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/491\r\n* `DurationValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/492\r\n* `IntValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/493\r\n* `StringValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/494\r\n* `TimestampValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/495\r\n* `TypeValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/496\r\n* `UintValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/497\r\n* `OpaqueValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/498\r\n* Upgrade ANTLR and enable Abseil for ANTLR by @copybara-service in https://github.com/google/cel-cpp/pull/503\r\n* Add JSON conversion to `Value` and friends by @copybara-service in https://github.com/google/cel-cpp/pull/500\r\n* `ListValue` and `MapValue` serialization by @copybara-service in https://github.com/google/cel-cpp/pull/501\r\n* Introduce `TypeManager` and `ValueManager` by @copybara-service in https://github.com/google/cel-cpp/pull/499\r\n* Unnest simple expressions instead of traversing recursively in the CEL C++ parser. by @copybara-service in https://github.com/google/cel-cpp/pull/502\r\n* Update managers to extend factories, leaving factories as an abstract interface by @copybara-service in https://github.com/google/cel-cpp/pull/504\r\n* Fix compiler warnings. by @copybara-service in https://github.com/google/cel-cpp/pull/507\r\n* Suppress deprecation warnings for cloud build. by @copybara-service in https://github.com/google/cel-cpp/pull/508\r\n* Split `data` into `type` and `value` by @copybara-service in https://github.com/google/cel-cpp/pull/509\r\n* Update some arguments to use views by @copybara-service in https://github.com/google/cel-cpp/pull/510\r\n* Update types and values to use managers instead of factories by @copybara-service in https://github.com/google/cel-cpp/pull/511\r\n* Fix missing include directives by @copybara-service in https://github.com/google/cel-cpp/pull/506\r\n* Change to `E2_HIGHCPU_32` by @copybara-service in https://github.com/google/cel-cpp/pull/513\r\n* Avoid mixing iterators and pointers due to MSVC by @copybara-service in https://github.com/google/cel-cpp/pull/512\r\n* Update arguments in `ValueManager` by @copybara-service in https://github.com/google/cel-cpp/pull/516\r\n* Add evaluator support for lazily evaluating certain subexpressions. by @copybara-service in https://github.com/google/cel-cpp/pull/481\r\n* Replace `type()` with `GetType(TypeManager&)` and `GetTypeName()` by @copybara-service in https://github.com/google/cel-cpp/pull/518\r\n* Split `value_provider.cc` into separate files by @copybara-service in https://github.com/google/cel-cpp/pull/519\r\n* Remove `EnumType` and `EnumValue` by @copybara-service in https://github.com/google/cel-cpp/pull/521\r\n* Add additional benchmark cases for nested bind definitions. by @copybara-service in https://github.com/google/cel-cpp/pull/514\r\n* `StructValue` and `StructValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/520\r\n* Add support for nested lazy init bind definitions. by @copybara-service in https://github.com/google/cel-cpp/pull/515\r\n* Deserialization and builders for well known types by @copybara-service in https://github.com/google/cel-cpp/pull/522\r\n* Remove option for old non-unique id numbering for map/filter macros. by @copybara-service in https://github.com/google/cel-cpp/pull/523\r\n* Update SelectOptimization and AttributeTracking to behave consistently with cel.bind. by @copybara-service in https://github.com/google/cel-cpp/pull/524\r\n* Default enable lazy initialization for bind expressions. by @copybara-service in https://github.com/google/cel-cpp/pull/526\r\n* Temporarily remove new proto bindings by @copybara-service in https://github.com/google/cel-cpp/pull/534\r\n* Legacy managers and providers by @copybara-service in https://github.com/google/cel-cpp/pull/527\r\n* `Unknown` by @copybara-service in https://github.com/google/cel-cpp/pull/531\r\n* Split list/map into parsed/legacy by @copybara-service in https://github.com/google/cel-cpp/pull/530\r\n* Update `ListValue::ForEach` to additionally pass indices for convinience by @copybara-service in https://github.com/google/cel-cpp/pull/529\r\n* Tag benchmark so CI doesn't run it by @copybara-service in https://github.com/google/cel-cpp/pull/536\r\n* Remove `GetMemoryManager` from providers by @copybara-service in https://github.com/google/cel-cpp/pull/535\r\n* Update `MapValue::Has` by @copybara-service in https://github.com/google/cel-cpp/pull/528\r\n* `Equal` and `IsZeroValue` by @copybara-service in https://github.com/google/cel-cpp/pull/532\r\n* Update `StructValueBuilder::Build` by @copybara-service in https://github.com/google/cel-cpp/pull/533\r\n* Tune Bazel for GCB. Set parallelism and memory limits. by @copybara-service in https://github.com/google/cel-cpp/pull/540\r\n* More compatibility changes by @copybara-service in https://github.com/google/cel-cpp/pull/539\r\n* Update navigable AST to traverse nodes by cref. by @copybara-service in https://github.com/google/cel-cpp/pull/538\r\n* More compatibility changes by @copybara-service in https://github.com/google/cel-cpp/pull/541\r\n* Cleanup some interop usage by @copybara-service in https://github.com/google/cel-cpp/pull/544\r\n* Rename `memory_manager()` to `GetMemoryManager()` by @copybara-service in https://github.com/google/cel-cpp/pull/542\r\n* Add `proto2::Arena*` to `CreateTypeValueFromView` by @copybara-service in https://github.com/google/cel-cpp/pull/543\r\n* Implement type introspection for well known types by @copybara-service in https://github.com/google/cel-cpp/pull/546\r\n* Add `absl::optional` to various return types by @copybara-service in https://github.com/google/cel-cpp/pull/547\r\n* Add `const` to `TypeProvider` and `ValueProvider` by @copybara-service in https://github.com/google/cel-cpp/pull/548\r\n* Make `TypeProvider` and `ValueProvider` no long pure virtual by @copybara-service in https://github.com/google/cel-cpp/pull/549\r\n* Add default empty list and map implementation by @copybara-service in https://github.com/google/cel-cpp/pull/550\r\n* Add methods to factories for compatibility by @copybara-service in https://github.com/google/cel-cpp/pull/551\r\n* `TypeProvider` -> `TypeIntrospector` and `ValueProvider` -> `TypeReflector` by @copybara-service in https://github.com/google/cel-cpp/pull/552\r\n* Drop inheritance of `cel::TypeProvider` by @copybara-service in https://github.com/google/cel-cpp/pull/553\r\n* Detangle `legacy_type_adapter` from `base/` type/value by @copybara-service in https://github.com/google/cel-cpp/pull/554\r\n* Use dedicated comprehension slots inside of bind subexpressions when lazily evaluated. by @copybara-service in https://github.com/google/cel-cpp/pull/556\r\n* Add `StructValue::Qualify` by @copybara-service in https://github.com/google/cel-cpp/pull/555\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/557\r\n* Various bug fixes and changes to improve compatibility with `base/` handles, types, and values by @copybara-service in https://github.com/google/cel-cpp/pull/559\r\n* Add `base/value_manager.h` to assist migration by @copybara-service in https://github.com/google/cel-cpp/pull/560\r\n* Various miscellaneous fixes by @copybara-service in https://github.com/google/cel-cpp/pull/562\r\n* Update Abseil to `Abseil LTS 20240116.0` by @copybara-service in https://github.com/google/cel-cpp/pull/563\r\n* `cel::internal::NoDestructor` -> `absl::NoDestructor` by @copybara-service in https://github.com/google/cel-cpp/pull/564\r\n* `cel::internal::Overloaded` -> `absl::Overload` by @copybara-service in https://github.com/google/cel-cpp/pull/567\r\n* Miscellaneous changes by @copybara-service in https://github.com/google/cel-cpp/pull/565\r\n* Update `ProtobufDescriptorProvider::ProvideLegacyTypeInfo` to return `absl::nullopt` instead of `nullptr` by @copybara-service in https://github.com/google/cel-cpp/pull/566\r\n* Publish initial version of CEL C++ Codelab by @copybara-service in https://github.com/google/cel-cpp/pull/561\r\n* Add support for adding individual program steps in extensions. by @copybara-service in https://github.com/google/cel-cpp/pull/545\r\n* Avoid string/bytes copying when using arenas by @copybara-service in https://github.com/google/cel-cpp/pull/569\r\n* Optimize various `ListValue` and `MapValue` functions for literal lists/maps by @copybara-service in https://github.com/google/cel-cpp/pull/570\r\n* Update slot accounting for lazily evaluated bind expressions. by @copybara-service in https://github.com/google/cel-cpp/pull/573\r\n* `cel::Handle<T>` -> `T` by @copybara-service in https://github.com/google/cel-cpp/pull/568\r\n* Add `ABSL_CONST_INIT` and change `std::pair<uint8_t, uint8_t>` to `std::pair<const uint8_t, const uint8_t>` by @copybara-service in https://github.com/google/cel-cpp/pull/575\r\n* Add branch coverage utility to CEL C++ tools. by @copybara-service in https://github.com/google/cel-cpp/pull/525\r\n* Update evaluator to assume lazy bind evaluation is always enabled. This has been enabled by default for several weeks. by @copybara-service in https://github.com/google/cel-cpp/pull/572\r\n* Add type url parsing support by @copybara-service in https://github.com/google/cel-cpp/pull/578\r\n* Update googleapis and cel-spec versions to include updated syntax.proto definition with extension tags. by @copybara-service in https://github.com/google/cel-cpp/pull/580\r\n* Replace `Handle<T>` with `T` by @copybara-service in https://github.com/google/cel-cpp/pull/576\r\n* Kill `cel::Handle` entirely by @copybara-service in https://github.com/google/cel-cpp/pull/581\r\n* Remove `base/memory.h` by @copybara-service in https://github.com/google/cel-cpp/pull/582\r\n* Add support for extension tags in internal ast representation. by @copybara-service in https://github.com/google/cel-cpp/pull/585\r\n* Remove `base/type.h` and `base/value.h` by @copybara-service in https://github.com/google/cel-cpp/pull/587\r\n* Add support for converting proto extension tags to/from the internal ast representation. by @copybara-service in https://github.com/google/cel-cpp/pull/584\r\n* Remove `Kind::kWrapper` and `Kind::kEnum` by @copybara-service in https://github.com/google/cel-cpp/pull/590\r\n* Remove unused methods from migration by @copybara-service in https://github.com/google/cel-cpp/pull/591\r\n* Add optimization hints to `EvaluatorStack` and switch some to `FATAL` by @copybara-service in https://github.com/google/cel-cpp/pull/594\r\n* Devirtualize `ExpressionStep::id` and `ExpressionStep::ComesFromAst` by @copybara-service in https://github.com/google/cel-cpp/pull/593\r\n* Support for mapping protocol buffer types to CEL types by @copybara-service in https://github.com/google/cel-cpp/pull/597\r\n* Refactor flat expr builder to build a program tree then flatten instead of building the flat expression directly. by @copybara-service in https://github.com/google/cel-cpp/pull/596\r\n* Move inlined functions from header to source by @copybara-service in https://github.com/google/cel-cpp/pull/599\r\n* Remove reference to handle factory by @copybara-service in https://github.com/google/cel-cpp/pull/600\r\n* Add `ABSL_ATTRIBUTE_LIFETIME_BOUND` to `Shared` by @copybara-service in https://github.com/google/cel-cpp/pull/601\r\n* Add aliasing constructor to `Shared` by @copybara-service in https://github.com/google/cel-cpp/pull/602\r\n* Add `cel::StaticCast` by @copybara-service in https://github.com/google/cel-cpp/pull/603\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/604\r\n* Use alignment and new/delete utilities by @copybara-service in https://github.com/google/cel-cpp/pull/609\r\n* Add a few `google.protobuf.Any` utilities by @copybara-service in https://github.com/google/cel-cpp/pull/610\r\n* Move `IsProtoEnum` to internal by @copybara-service in https://github.com/google/cel-cpp/pull/611\r\n* Per abseil documentation: ```Note that this attribute is redundant if the variable is declared constexpr```. by @copybara-service in https://github.com/google/cel-cpp/pull/613\r\n* Avoid copies in function adapter code and CEL standard implementations for string value args. by @copybara-service in https://github.com/google/cel-cpp/pull/612\r\n* Optimize Value::kind(). This is called in a tight loop in final overload resolution so static array lookup can be faster than variant visitor dispatch. by @copybara-service in https://github.com/google/cel-cpp/pull/615\r\n* Move function adapter code to /runtime. by @copybara-service in https://github.com/google/cel-cpp/pull/617\r\n* Fix `cel::common_internal::IsStringLiteral` by @copybara-service in https://github.com/google/cel-cpp/pull/614\r\n* Protocol buffer types to JSON by @copybara-service in https://github.com/google/cel-cpp/pull/618\r\n* Directly return cel::Value return types instead of passing through wrapping logic in function adapter code. by @copybara-service in https://github.com/google/cel-cpp/pull/619\r\n* Propagate `ValueManager&` through various functions by @copybara-service in https://github.com/google/cel-cpp/pull/623\r\n* Remove `StructValue::ConvertToJsonObject` by @copybara-service in https://github.com/google/cel-cpp/pull/625\r\n* Introduce specialized interface for `Any` to `Json` conversion by @copybara-service in https://github.com/google/cel-cpp/pull/627\r\n* Protocol buffer `AnyToJsonConverter` implementation by @copybara-service in https://github.com/google/cel-cpp/pull/626\r\n* Refactor protobuf JSON internals to expose functionality by @copybara-service in https://github.com/google/cel-cpp/pull/629\r\n* Remove unused variables from select step impl and flat expr builder. by @copybara-service in https://github.com/google/cel-cpp/pull/630\r\n* Refactor qualify logic to be value agnostic by @copybara-service in https://github.com/google/cel-cpp/pull/631\r\n* Move implementations from the header file. by @copybara-service in https://github.com/google/cel-cpp/pull/635\r\n* Various tweaks to interfaces and testing by @copybara-service in https://github.com/google/cel-cpp/pull/637\r\n* Add gtest matching utilities for cel::Value. by @copybara-service in https://github.com/google/cel-cpp/pull/638\r\n* Generalize `JsonValueManager` as `PiecewiseValueManager` by @copybara-service in https://github.com/google/cel-cpp/pull/643\r\n* Protocol buffer message conversion internals. Provides a default Struct implementation for pb messages. by @copybara-service in https://github.com/google/cel-cpp/pull/640\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/622\r\n* Implement unwrapping utilities (`cel::Value` -> protobuf type). by @copybara-service in https://github.com/google/cel-cpp/pull/645\r\n* Update `descriptor_pool()` to be public by @copybara-service in https://github.com/google/cel-cpp/pull/646\r\n* Revive conformance test harness for modern values by @copybara-service in https://github.com/google/cel-cpp/pull/649\r\n* Revive conformance test harness for modern values by @copybara-service in https://github.com/google/cel-cpp/pull/650\r\n* Revive conformance test harness for modern values by @copybara-service in https://github.com/google/cel-cpp/pull/651\r\n* Split more internal helper methods into proto lite by @copybara-service in https://github.com/google/cel-cpp/pull/652\r\n* Fix cloudbuild by updating cel-spec dependency by @copybara-service in https://github.com/google/cel-cpp/pull/658\r\n* Fix casting support for `optional_type` by @copybara-service in https://github.com/google/cel-cpp/pull/657\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/661\r\n* Implement runtime support for optionals by @copybara-service in https://github.com/google/cel-cpp/pull/660\r\n* Update `optional.or` and `optional.orValue` to short-circuit upon an error by @copybara-service in https://github.com/google/cel-cpp/pull/664\r\n* Implement `encoders` extension in C++ by @copybara-service in https://github.com/google/cel-cpp/pull/665\r\n* Split create map and create struct libraries. Apply IWYU and build_cleaner findings. No functional changes. by @copybara-service in https://github.com/google/cel-cpp/pull/663\r\n* Remove attribute checking from slot accesses. by @copybara-service in https://github.com/google/cel-cpp/pull/662\r\n* Add support for handling extensions by @copybara-service in https://github.com/google/cel-cpp/pull/667\r\n* Fix unexpected conversion from `map<{bool,int,uint}, ?>` to `google.protobuf.Struct` by @copybara-service in https://github.com/google/cel-cpp/pull/668\r\n* Introduce `MacroRegistry` by @copybara-service in https://github.com/google/cel-cpp/pull/671\r\n* Migrate `math_ext` to modern values by @copybara-service in https://github.com/google/cel-cpp/pull/673\r\n* Minor modifications to `common/source.h` by @copybara-service in https://github.com/google/cel-cpp/pull/674\r\n* Remove `ABSL_ATTRIBUTE_PURE_FUNCTION` by @copybara-service in https://github.com/google/cel-cpp/pull/678\r\n* Further restrict default parser limits by @copybara-service in https://github.com/google/cel-cpp/pull/676\r\n* Make use of `MacroRegistry` and enable `bindings` conformance tests by @copybara-service in https://github.com/google/cel-cpp/pull/679\r\n* Enable `math` conformance tests by @copybara-service in https://github.com/google/cel-cpp/pull/680\r\n* Upgrade interop to handle modern values by @copybara-service in https://github.com/google/cel-cpp/pull/669\r\n* Enable `proto2` conformance tests by @copybara-service in https://github.com/google/cel-cpp/pull/681\r\n* Enable conformance tests for non-arena by @copybara-service in https://github.com/google/cel-cpp/pull/682\r\n* Add definitions for directly evaluated steps (recursive evaluation). by @copybara-service in https://github.com/google/cel-cpp/pull/683\r\n* Add support for recursively evaluated functions and constants. by @copybara-service in https://github.com/google/cel-cpp/pull/684\r\n* Add support for recursive plans up to a certain depth. by @copybara-service in https://github.com/google/cel-cpp/pull/685\r\n* Add recursive implementation for ternary steps. by @copybara-service in https://github.com/google/cel-cpp/pull/686\r\n* Short-circuit in `optional.or` and `optional.orValue` when receiver is unknown by @copybara-service in https://github.com/google/cel-cpp/pull/704\r\n* Add support for recursively planned CreateList expressions. by @copybara-service in https://github.com/google/cel-cpp/pull/687\r\n* Add support for recursively planned ident steps. by @copybara-service in https://github.com/google/cel-cpp/pull/694\r\n* Add support for recursively planned select operations. by @copybara-service in https://github.com/google/cel-cpp/pull/633\r\n* Add benchmark support for recursive planning. by @copybara-service in https://github.com/google/cel-cpp/pull/688\r\n* Add support for recursively planned index operations. by @copybara-service in https://github.com/google/cel-cpp/pull/690\r\n* Introduce `cel::Expr` by @copybara-service in https://github.com/google/cel-cpp/pull/706\r\n* Add support for recursively planned slot steps. by @copybara-service in https://github.com/google/cel-cpp/pull/691\r\n* Add support for recursively planned map steps. by @copybara-service in https://github.com/google/cel-cpp/pull/693\r\n* Add support for recursively planned struct steps. by @copybara-service in https://github.com/google/cel-cpp/pull/659\r\n* Add support for tracing recursively planned programs. by @copybara-service in https://github.com/google/cel-cpp/pull/695\r\n* Add support for recursively planned bind expressions. by @copybara-service in https://github.com/google/cel-cpp/pull/696\r\n* Implement bidirectional conversion between `cel::Expr` and `google::api::expr::Expr` by @copybara-service in https://github.com/google/cel-cpp/pull/707\r\n* Add recursive plan support for mutable lists in map/filter macros. by @copybara-service in https://github.com/google/cel-cpp/pull/698\r\n* Add recursive eval support for shadowable values. by @copybara-service in https://github.com/google/cel-cpp/pull/699\r\n* Add support for evaluating lazily resolved / contextual functions recursively. by @copybara-service in https://github.com/google/cel-cpp/pull/700\r\n* Add support for inspecting and extracting some recursive program steps (function calls and constants). by @copybara-service in https://github.com/google/cel-cpp/pull/701\r\n* Add select optimization support for recursively planned programs. by @copybara-service in https://github.com/google/cel-cpp/pull/702\r\n* Test fix for branch coverage to tolerate slight variations in trace behavior. by @copybara-service in https://github.com/google/cel-cpp/pull/703\r\n* Replace `cel::ast_internal::{Constant,Ident}` with `cel::{Constant,IdentExpr}` by @copybara-service in https://github.com/google/cel-cpp/pull/710\r\n* Update graphviz formatting: by @copybara-service in https://github.com/google/cel-cpp/pull/713\r\n* Reject mixed `CreateStruct.Entry.key_kind` by @copybara-service in https://github.com/google/cel-cpp/pull/714\r\n* Replace more of `base/base_internal/expr.h` with `common/ast.h` by @copybara-service in https://github.com/google/cel-cpp/pull/716\r\n* Make `Value` default constructible, copyable, and moveable. by @copybara-service in https://github.com/google/cel-cpp/pull/717\r\n* Move `Expr` and friends to a separate target and move `base/ast.h` to `common/ast.h` by @copybara-service in https://github.com/google/cel-cpp/pull/718\r\n* Make `Type` default constructible, copyable, and moveable. by @copybara-service in https://github.com/google/cel-cpp/pull/719\r\n* Add gtest matchers for OptionalValue by @copybara-service in https://github.com/google/cel-cpp/pull/724\r\n* Add `TypeParamType` and `FunctionType` by @copybara-service in https://github.com/google/cel-cpp/pull/721\r\n* Add specialization for default cel::Program implementation if the program is fully recursive. by @copybara-service in https://github.com/google/cel-cpp/pull/726\r\n* Remove `subexpr` argument to `{Pre,Post}VisitComprehensionSubexpression` by @copybara-service in https://github.com/google/cel-cpp/pull/723\r\n* Split optional.or specific jump logic to its own cc_library. No functional changes. by @copybara-service in https://github.com/google/cel-cpp/pull/727\r\n* Move optional.or implementation to a custom evaluator step. by @copybara-service in https://github.com/google/cel-cpp/pull/728\r\n* Introduce `Decl` hierarchy by @copybara-service in https://github.com/google/cel-cpp/pull/722\r\n* Add recursive implementation for optional.or(Value) steps. by @copybara-service in https://github.com/google/cel-cpp/pull/725\r\n* Fix use-after-free for proto map list keys. by @copybara-service in https://github.com/google/cel-cpp/pull/729\r\n* Return `const Type&` instead of `TypeView` and add `ABSL_ATTRIBUTE_LIFETIME_BOUND` by @copybara-service in https://github.com/google/cel-cpp/pull/730\r\n* Reimplement C++ parser using `common/ast.h` by @copybara-service in https://github.com/google/cel-cpp/pull/708\r\n* Swap argument order in `AstVisitor` by @copybara-service in https://github.com/google/cel-cpp/pull/731\r\n* Switch from pointers to references in `AstVisitor` by @copybara-service in https://github.com/google/cel-cpp/pull/732\r\n* Split conformance value conversion utility to a separate build target. by @copybara-service in https://github.com/google/cel-cpp/pull/733\r\n* Temporarily remove new proto bindings by @copybara-service in https://github.com/google/cel-cpp/pull/737\r\n* Introduce `Reference` by @copybara-service in https://github.com/google/cel-cpp/pull/736\r\n* Update `IsEmpty` and `Size` to return `absl::StatusOr` by @copybara-service in https://github.com/google/cel-cpp/pull/739\r\n* Reduce code duplication in `BoolValue` by @copybara-service in https://github.com/google/cel-cpp/pull/741\r\n* Reduce code duplication in `DoubleValue` by @copybara-service in https://github.com/google/cel-cpp/pull/742\r\n* Reduce code duplication in `DurationValue` by @copybara-service in https://github.com/google/cel-cpp/pull/743\r\n* Reduce code duplication in `UintValue`, `TimestampValue`, `NullValue`, `IntValue` by @copybara-service in https://github.com/google/cel-cpp/pull/747\r\n* `cel::internal::to_address` by @copybara-service in https://github.com/google/cel-cpp/pull/753\r\n* Fix nullability annotation of `ReferenceCountingMemoryManager::Allocate()`. by @copybara-service in https://github.com/google/cel-cpp/pull/748\r\n* More comprehensive wrappers for `operator new` and `operator delete` by @copybara-service in https://github.com/google/cel-cpp/pull/754\r\n* Add metadata header defining bit mask by @copybara-service in https://github.com/google/cel-cpp/pull/755\r\n* Introduce `cel::Allocator` by @copybara-service in https://github.com/google/cel-cpp/pull/756\r\n* Use register helpers in the string package. by @copybara-service in https://github.com/google/cel-cpp/pull/766\r\n* Additional documentation for using FunctionAdapter and RegisterHelper. by @copybara-service in https://github.com/google/cel-cpp/pull/767\r\n* Add `Allocator::allocate_object<T>` and `Allocator::deallocate_object<T>` by @copybara-service in https://github.com/google/cel-cpp/pull/762\r\n* Add function for enabling select optimization on cel::RuntimeBuilder. by @copybara-service in https://github.com/google/cel-cpp/pull/771\r\n* Collapse `MemoryManager` into new/delete and `proto2::Arena` by @copybara-service in https://github.com/google/cel-cpp/pull/765\r\n* Rename @cel.attribute to cel.@attribute to be consistent with other cel-namespaced internal functions. by @copybara-service in https://github.com/google/cel-cpp/pull/772\r\n* `cel::common_internal::ByteString` and `cel::common_internal::ByteStringView` by @copybara-service in https://github.com/google/cel-cpp/pull/761\r\n* Overhaul `Unique<T>` by @copybara-service in https://github.com/google/cel-cpp/pull/764\r\n* Add `to_address` support for `cel::Unique<T>` by @copybara-service in https://github.com/google/cel-cpp/pull/769\r\n* Internal change. by @copybara-service in https://github.com/google/cel-cpp/pull/757\r\n* Stop returning `cel::ValueView` by @copybara-service in https://github.com/google/cel-cpp/pull/779\r\n* Fork and migrate benchmarks to use modern APIs. by @copybara-service in https://github.com/google/cel-cpp/pull/778\r\n* Add option for reference counting support benchmarks. by @copybara-service in https://github.com/google/cel-cpp/pull/780\r\n* Replace uses of `down_cast` on Protobuf messages with `static_cast`. by @copybara-service in https://github.com/google/cel-cpp/pull/783\r\n* Make choice of legacy or modern list/map builder configurable. Default to using modern builders when using cel::Runtime and related types. by @copybara-service in https://github.com/google/cel-cpp/pull/786\r\n* Add a test matcher for the elements of cel::ListValue and cel::MapValue. by @copybara-service in https://github.com/google/cel-cpp/pull/790\r\n* Add a matcher to test cel::StructValue against a protobuf message. by @copybara-service in https://github.com/google/cel-cpp/pull/789\r\n* Update docker image to Bazel 7.2.1 by @copybara-service in https://github.com/google/cel-cpp/pull/795\r\n* Refactor out conformance service interface and options by @copybara-service in https://github.com/google/cel-cpp/pull/796\r\n* Port conformance test runner to C++ by @copybara-service in https://github.com/google/cel-cpp/pull/797\r\n* Remove now unused dependencies related to conformance testing by @copybara-service in https://github.com/google/cel-cpp/pull/798\r\n* Upgrade `ABSL_DCHECK` to `ABSL_CHECK` in the cache by @copybara-service in https://github.com/google/cel-cpp/pull/799\r\n* Remove `ABSL_ATTRIBTUE_PURE_FUNCTION` for non-trivial return types by @copybara-service in https://github.com/google/cel-cpp/pull/800\r\n* Update dependencies to latest versions by @copybara-service in https://github.com/google/cel-cpp/pull/793\r\n* Fix tracing support for cel.bind() expressions. Prior to this change, tracing might report the wrong value or LOG(ERROR) when accessing the lazily initialized variable for the first time. by @copybara-service in https://github.com/google/cel-cpp/pull/801\r\n* `cel::Owned<T>`, `cel::Borrowed<T>`, `cel::Ownable<T>`, `cel::Borrowable<T>` by @copybara-service in https://github.com/google/cel-cpp/pull/774\r\n* Update Dockerfile and cloudbuild.yaml to use smaller container by @copybara-service in https://github.com/google/cel-cpp/pull/803\r\n* Add support for `proto2::ArenaSafeUniquePtr` to `cel::Unique` by @copybara-service in https://github.com/google/cel-cpp/pull/802\r\n* Upgrade `ABSL_DCHECK` to `ABSL_CHECK` in the cache by @copybara-service in https://github.com/google/cel-cpp/pull/805\r\n* Remove `ABSL_ATTRIBUTE_PURE_FUNCTION` from cache getters by @copybara-service in https://github.com/google/cel-cpp/pull/806\r\n* Remove more `ABSL_ATTRIBUTE_PURE_FUNCTION` by @copybara-service in https://github.com/google/cel-cpp/pull/808\r\n* Propagate `proto2::Arena*` and simplify by using `Owner` and `Borrower` to implement `Owned<T>` and `Borrowed<T>` by @copybara-service in https://github.com/google/cel-cpp/pull/807\r\n* Fixing the CelMap to string operator to gracefully handle invalid keys. by @copybara-service in https://github.com/google/cel-cpp/pull/804\r\n* Remove `ValueView` from `extensions/...` by @copybara-service in https://github.com/google/cel-cpp/pull/812\r\n* Remove parts of `ValueView` from `common/...` by @copybara-service in https://github.com/google/cel-cpp/pull/813\r\n* Remove `ValueView` from `common/legacy_value` by @copybara-service in https://github.com/google/cel-cpp/pull/814\r\n* Make cel::Activation move constructible / assignable. by @copybara-service in https://github.com/google/cel-cpp/pull/815\r\n* Rollback: Remove `ValueView` entirely by @copybara-service in https://github.com/google/cel-cpp/pull/817\r\n* Rollback: Remove `ValueView` entirely by @copybara-service in https://github.com/google/cel-cpp/pull/818\r\n* Handle well known types using protobuf-lite runtime by @copybara-service in https://github.com/google/cel-cpp/pull/819\r\n* Scrub internal issue TODOs. Currently they mostly map to uncreated issues which aren't particularly helpful. by @copybara-service in https://github.com/google/cel-cpp/pull/820\r\n* Fix CEL C++ to build when generated messages lack reflection by @copybara-service in https://github.com/google/cel-cpp/pull/821\r\n* Fold proto-less versions of parsed / checked expressions into the AstImpl. by @copybara-service in https://github.com/google/cel-cpp/pull/823\r\n* Mark `CelValue::CreateMessageWrapper` and `CelValue::MessageWrapperOrDie` as deprecated by @copybara-service in https://github.com/google/cel-cpp/pull/826\r\n* Mark `MessageWrapper` as deprecated by @copybara-service in https://github.com/google/cel-cpp/pull/828\r\n* Make `PortableFunctionAdapter` an alias to `FunctionAdapter` by @copybara-service in https://github.com/google/cel-cpp/pull/825\r\n* moves vector operations to a location where they're operating on complete types by @copybara-service in https://github.com/google/cel-cpp/pull/829\r\n* Implement remainder of math function extensions by @copybara-service in https://github.com/google/cel-cpp/pull/830\r\n* Consolidate iterative lazy slot initialization into a single step by @copybara-service in https://github.com/google/cel-cpp/pull/833\r\n* Cleanup `cel::BoolValue` by @copybara-service in https://github.com/google/cel-cpp/pull/836\r\n* Cleanup `cel::UintValue` by @copybara-service in https://github.com/google/cel-cpp/pull/842\r\n* Cleanup `cel::IntValue` by @copybara-service in https://github.com/google/cel-cpp/pull/839\r\n* Cleanup `cel::DoubleValue` by @copybara-service in https://github.com/google/cel-cpp/pull/837\r\n* Cleanup `cel::DurationValue` by @copybara-service in https://github.com/google/cel-cpp/pull/838\r\n* Cleanup `cel::NullValue` by @copybara-service in https://github.com/google/cel-cpp/pull/840\r\n* Cleanup `cel::TimestampValue` by @copybara-service in https://github.com/google/cel-cpp/pull/841\r\n* Remove `Value::swap` by @copybara-service in https://github.com/google/cel-cpp/pull/845\r\n* Remove `Value::GetSerializedSize` by @copybara-service in https://github.com/google/cel-cpp/pull/844\r\n* Add `Value::Enum` methods for dynamic and generated protobuf enums by @copybara-service in https://github.com/google/cel-cpp/pull/835\r\n* Remove `Value::Serialize`, `Value::GetTypeUrl`, and `Value::ConvertToAny` by @copybara-service in https://github.com/google/cel-cpp/pull/846\r\n* Add `ClearSlotsStep` by @copybara-service in https://github.com/google/cel-cpp/pull/847\r\n* Remove `cel::TypeView` by @copybara-service in https://github.com/google/cel-cpp/pull/848\r\n* Silence build warnings. by @copybara-service in https://github.com/google/cel-cpp/pull/850\r\n* Add minimal and testing descriptor pools by @copybara-service in https://github.com/google/cel-cpp/pull/852\r\n* Add utility for getting generated message type name by @copybara-service in https://github.com/google/cel-cpp/pull/853\r\n* Include identity functions in the standard definitions by @copybara-service in https://github.com/google/cel-cpp/pull/851\r\n* Make `StructType` a composed type by @copybara-service in https://github.com/google/cel-cpp/pull/849\r\n* Mark non-modifying container algorithms as constexpr for C++20. by @copybara-service in https://github.com/google/cel-cpp/pull/824\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/855\r\n* Consolidate type kind checking and casting by @copybara-service in https://github.com/google/cel-cpp/pull/856\r\n* Delete now unused `SizedInputView` by @copybara-service in https://github.com/google/cel-cpp/pull/860\r\n* Implement a basic string pool by @copybara-service in https://github.com/google/cel-cpp/pull/857\r\n* Fix typo in ast_rewrite.h comment by @copybara-service in https://github.com/google/cel-cpp/pull/861\r\n* Add template helper for indexing ConstantKind by type. by @copybara-service in https://github.com/google/cel-cpp/pull/858\r\n* Remove `cel::Any` by @copybara-service in https://github.com/google/cel-cpp/pull/862\r\n* Overhaul `cel::Type` by @copybara-service in https://github.com/google/cel-cpp/pull/863\r\n* Implement `TypePool` by @copybara-service in https://github.com/google/cel-cpp/pull/864\r\n* Add `EnumType` which covers the enum proposal, which is type only by @copybara-service in https://github.com/google/cel-cpp/pull/865\r\n* Make `Type` always valid by @copybara-service in https://github.com/google/cel-cpp/pull/866\r\n* Implement parts of `cel.@block` in C++ evaluator by @copybara-service in https://github.com/google/cel-cpp/pull/868\r\n* Add internal testing helpers for textproto by @copybara-service in https://github.com/google/cel-cpp/pull/869\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/873\r\n* Add `cel::SetAnyValueFromCord` by @copybara-service in https://github.com/google/cel-cpp/pull/875\r\n* Internal change. by @copybara-service in https://github.com/google/cel-cpp/pull/877\r\n* Upgrade `StructTypeField` to launder `proto2::FieldDescriptor` by @copybara-service in https://github.com/google/cel-cpp/pull/872\r\n* Add a warning about calling the parser during C++ static initialization. by @copybara-service in https://github.com/google/cel-cpp/pull/878\r\n* Add missing identity functions for duration and timestamp by @copybara-service in https://github.com/google/cel-cpp/pull/880\r\n* Update `cel.@block` implementation in C++ to handle comprehensions by @copybara-service in https://github.com/google/cel-cpp/pull/879\r\n* Add unit tests for `cel.@block` by @copybara-service in https://github.com/google/cel-cpp/pull/882\r\n* Add skeletons for message-based values by @copybara-service in https://github.com/google/cel-cpp/pull/886\r\n* Make Activation move-able like its parent, BaseActivation. by @copybara-service in https://github.com/google/cel-cpp/pull/887\r\n* `ArenaString` by @copybara-service in https://github.com/google/cel-cpp/pull/881\r\n* Add `@com_google_cel_spec//proto/cel/expr` to testing descriptor pool by @copybara-service in https://github.com/google/cel-cpp/pull/884\r\n* Switch to open source status matchers by @copybara-service in https://github.com/google/cel-cpp/pull/888\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/891\r\n* Introduce better `Value::Is`, `Value::As`, and explicit conversion overloads by @copybara-service in https://github.com/google/cel-cpp/pull/890\r\n* Output descriptor differences when ValidateStandardMessageType fails. by @copybara-service in https://github.com/google/cel-cpp/pull/889\r\n* Remove some deadcode by @copybara-service in https://github.com/google/cel-cpp/pull/896\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/895\r\n* `ParsedMessageValue` stub out `StructValue` by @copybara-service in https://github.com/google/cel-cpp/pull/897\r\n* Remove static_assert that checks the default new alignment. by @copybara-service in https://github.com/google/cel-cpp/pull/902\r\n* `ParsedRepeatedFieldValue` stub out `ListValue` by @copybara-service in https://github.com/google/cel-cpp/pull/898\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/894\r\n* `ParsedMapFieldValue` stub out `MapValue` by @copybara-service in https://github.com/google/cel-cpp/pull/899\r\n* `ParsedJsonMapValue` stub out `MapValue` by @copybara-service in https://github.com/google/cel-cpp/pull/901\r\n* Intergate `ParsedMessageValue` and `MessageValue` into the `Value` hierarchy by @copybara-service in https://github.com/google/cel-cpp/pull/905\r\n* Integrate `ParsedMapFieldValue`, `ParsedJsonMapValue`, `ParsedRepeatedFieldValue`, and `ParsedJsonListValue` into the `Value` hierarchy by @copybara-service in https://github.com/google/cel-cpp/pull/906\r\n* Remove `LegacyAnyPackingApis` by @copybara-service in https://github.com/google/cel-cpp/pull/914\r\n* Add interfaces and coordinating types for type checker. by @copybara-service in https://github.com/google/cel-cpp/pull/915\r\n* Wire stub implementation for type checker into conformance. Only runs in \"dashboard\" mode. by @copybara-service in https://github.com/google/cel-cpp/pull/822\r\n* Expose making reference counted strings internally by @copybara-service in https://github.com/google/cel-cpp/pull/918\r\n* Add basic name resolution for C++ type checker. by @copybara-service in https://github.com/google/cel-cpp/pull/843\r\n* Prepare for `google::protobuf::MapKey` to no longer own string keys by @copybara-service in https://github.com/google/cel-cpp/pull/922\r\n* Remove implicit constructor from `cel::ErrorValue` by @copybara-service in https://github.com/google/cel-cpp/pull/926\r\n* Explicitly delete implicitly deleted constructor by @copybara-service in https://github.com/google/cel-cpp/pull/929\r\n* Don't ABSL_CONST_INIT with constexpr by @copybara-service in https://github.com/google/cel-cpp/pull/927\r\n* Unified well known type handling by @copybara-service in https://github.com/google/cel-cpp/pull/910\r\n* Mark unused parameter as such by @copybara-service in https://github.com/google/cel-cpp/pull/928\r\n* Add standard library declarations for C++ type checker. by @copybara-service in https://github.com/google/cel-cpp/pull/916\r\n* Update Ast Type operator== to correctly handle comparing TypeTypes by @copybara-service in https://github.com/google/cel-cpp/pull/919\r\n* No public description by @copybara-service in https://github.com/google/cel-cpp/pull/930\r\n* Add basic support for type inferencing in CEL C++ type checker for literals and loops. Follow-ups will add support for function overloads and struct types. by @copybara-service in https://github.com/google/cel-cpp/pull/920\r\n* Unified well known type unwrapping by @copybara-service in https://github.com/google/cel-cpp/pull/923\r\n* Replacement for converting messages to structured JSON by @copybara-service in https://github.com/google/cel-cpp/pull/925\r\n* Switch from `static_cast` to member functions for conversion by @copybara-service in https://github.com/google/cel-cpp/pull/935\r\n* Add support for basic function overload resolution. Follow-up will address resolving parameterized types. by @copybara-service in https://github.com/google/cel-cpp/pull/924\r\n* Unified JSON equality and debug strings by @copybara-service in https://github.com/google/cel-cpp/pull/932\r\n* `ParsedJsonListValue` and `ParsedJsonMapValue` by @copybara-service in https://github.com/google/cel-cpp/pull/933\r\n* Forward `cel::InstanceOf`, `cel::Cast`, and `cel::As` to member functions by @copybara-service in https://github.com/google/cel-cpp/pull/936\r\n* Fix `Unique::PreRelease` to cast away constness before calling `google::protobuf::Arena::Own` by @copybara-service in https://github.com/google/cel-cpp/pull/939\r\n* Switch from static_cast to member functions for conversion 2 by @copybara-service in https://github.com/google/cel-cpp/pull/938\r\n* Remove deadcode by @copybara-service in https://github.com/google/cel-cpp/pull/940\r\n* Add support for type parameter inferencing by @copybara-service in https://github.com/google/cel-cpp/pull/931\r\n* Add initial support checking message creations sub-expressions in C++ type checker. Add coverage for special-cased well-known types. by @copybara-service in https://github.com/google/cel-cpp/pull/934\r\n* Add `Is`, `As`, and `Get` for `ParsedMapFieldValue` and `ParsedRepeatedFieldValue` by @copybara-service in https://github.com/google/cel-cpp/pull/946\r\n* Add support for checking field accesses. by @copybara-service in https://github.com/google/cel-cpp/pull/937\r\n* Implement CEL equality in terms of protocol buffer messages by @copybara-service in https://github.com/google/cel-cpp/pull/944\r\n* Add support for looking up enum values in cel::TypeIntrospector by @copybara-service in https://github.com/google/cel-cpp/pull/942\r\n* Internal change by @copybara-service in https://github.com/google/cel-cpp/pull/949\r\n* Move `&` overload to be inline by @copybara-service in https://github.com/google/cel-cpp/pull/952\r\n* Internal change by @copybara-service in https://github.com/google/cel-cpp/pull/948\r\n* Convert missed `explicit operator` overload by @copybara-service in https://github.com/google/cel-cpp/pull/951\r\n* Add support for looking up type constants and enums. by @copybara-service in https://github.com/google/cel-cpp/pull/943\r\n* Add type checking to conformance tests. by @copybara-service in https://github.com/google/cel-cpp/pull/945\r\n* Further deduplicate code by @copybara-service in https://github.com/google/cel-cpp/pull/954\r\n* Update FunctionDecl to maintain insertion order for Overloads. by @copybara-service in https://github.com/google/cel-cpp/pull/955\r\n* Initialize `google.protobuf.FieldMask` reflection if the descriptor is present by @copybara-service in https://github.com/google/cel-cpp/pull/959\r\n* Replace third-party message values with first-party message values by @copybara-service in https://github.com/google/cel-cpp/pull/956\r\n* Utilize zero-copy `proto2::MapKey` when available by @copybara-service in https://github.com/google/cel-cpp/pull/962\r\n* Do not create our own dynamic message factory by @copybara-service in https://github.com/google/cel-cpp/pull/963\r\n* Add library declaring CEL optional definitions for the C++ type checker. by @copybara-service in https://github.com/google/cel-cpp/pull/957\r\n* Add `DCHECK` to `ArenaAllocator` and `ArenaAllocatorFor` by @copybara-service in https://github.com/google/cel-cpp/pull/966\r\n* Add enums representing active kind for cel::Expr and cel::Constant. by @copybara-service in https://github.com/google/cel-cpp/pull/965\r\n* Remove weak symbols from CEL by @copybara-service in https://github.com/google/cel-cpp/pull/968\r\n* Fix issue location calculation and display to match Go implementation. by @copybara-service in https://github.com/google/cel-cpp/pull/972\r\n* Fix type declaration for 'type' (type(type) instead of type(A)) by @copybara-service in https://github.com/google/cel-cpp/pull/973\r\n* Remove type annotation for optional select (the field name string does not describe a runtime value). by @copybara-service in https://github.com/google/cel-cpp/pull/974\r\n* Add support for dumping checked ASTs in the baseline test format used by CEL Java library. by @copybara-service in https://github.com/google/cel-cpp/pull/975\r\n* Mark legacy container methods that do not take an arena as deprecated by @copybara-service in https://github.com/google/cel-cpp/pull/976\r\n* Move legacy runtime type conversion by @copybara-service in https://github.com/google/cel-cpp/pull/981\r\n* Make `NewDeleteAllocator` and `ArenaAllocator` distinct types by @copybara-service in https://github.com/google/cel-cpp/pull/979\r\n* Update assignability to follow legacy nullability behaviors. by @copybara-service in https://github.com/google/cel-cpp/pull/977\r\n* Fix bug in `CreateListDirectStep` which attempts to add unknowns to a list by @copybara-service in https://github.com/google/cel-cpp/pull/982\r\n* Remove last vestiges of explicit conversion operators by @copybara-service in https://github.com/google/cel-cpp/pull/986\r\n* Change `NewDeleteAllocator<void>` from `struct` to `class` by @copybara-service in https://github.com/google/cel-cpp/pull/991\r\n* Change MessageToJsonState from struct to class by @copybara-service in https://github.com/google/cel-cpp/pull/993\r\n* Add mutable list values and mutable map values by @copybara-service in https://github.com/google/cel-cpp/pull/990\r\n* Optimize mutable list append to avoid creating temporary single element list by @copybara-service in https://github.com/google/cel-cpp/pull/996\r\n* Move struct value builder into `common/` by @copybara-service in https://github.com/google/cel-cpp/pull/995\r\n* Cleanup now unused code from the migration by @copybara-service in https://github.com/google/cel-cpp/pull/999\r\n* Prepare code for breaking change in Protobuf C++ API. by @copybara-service in https://github.com/google/cel-cpp/pull/1000\r\n* Add variable for dyn type (e.g. `type(dyn(1)) == dyn`) by @copybara-service in https://github.com/google/cel-cpp/pull/989\r\n* Return somewhat expected errors as `cel::ErrorValue` instead of `absl::Status` by @copybara-service in https://github.com/google/cel-cpp/pull/1005\r\n* Silence -Winvalid-offsetof for cel::common_internal::ReferenceCountedString by @copybara-service in https://github.com/google/cel-cpp/pull/1006\r\n* Migrate remaining well known type handling and remove deadcode by @copybara-service in https://github.com/google/cel-cpp/pull/1001\r\n* Update assignability check to allow wrapper types to match their corresponding primitives. by @copybara-service in https://github.com/google/cel-cpp/pull/1007\r\n* Update TypeChecker builder to error when adding overloads that overlap with built-in macros. by @copybara-service in https://github.com/google/cel-cpp/pull/1008\r\n* Restore legacy behavior for ignoring overflows in duration/timestamp by @copybara-service in https://github.com/google/cel-cpp/pull/1010\r\n* Mandate passing `proto2::DescriptorPool` to the type checker by @copybara-service in https://github.com/google/cel-cpp/pull/1012\r\n* Move `CheckerOptions` to the `cel` namespace by @copybara-service in https://github.com/google/cel-cpp/pull/1013\r\n\r\n\r\n**Full Changelog**: https://github.com/google/cel-cpp/compare/v0.9.0...v0.10.0","mentions_count":1},{"url":"https://api.github.com/repos/google/cel-cpp/releases/104049195","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/104049195/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/104049195/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.9.0","id":104049195,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4GM6or","tag_name":"v0.9.0","target_commitish":"master","name":"Release v0.9.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-05-23T21:07:38Z","published_at":"2023-05-24T05:18:25Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.9.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.9.0","body":"## Release v0.9.0\r\n\r\nThis release represents roughly one year plus of refactors aimed at improving performance and removing\r\nprotobuf as a core link time dependency of CEL. There are still many more changes in flight, but this release\r\nrepresents a significant update in how CEL is designed and implemented within C++.\r\n\r\n## New Contributors\r\n* @tyxia made their first contribution in https://github.com/google/cel-cpp/pull/164\r\n\r\n**Full Changelog**: https://github.com/google/cel-cpp/compare/v0.8.0...v0.9.0","reactions":{"url":"https://api.github.com/repos/google/cel-cpp/releases/104049195/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"mentions_count":1},{"url":"https://api.github.com/repos/google/cel-cpp/releases/68908481","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/68908481/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/68908481/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.8.0","id":68908481,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4EG3XB","tag_name":"v0.8.0","target_commitish":"master","name":"Release v0.8.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2022-06-07T02:38:10Z","published_at":"2022-06-08T05:02:12Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.8.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.8.0","body":"## Changes\r\n* Removed UTF-8 library dependencies\r\n* Optimized performance of list append in tight loops\r\n* Introduced support for heterogeneous equality and cross-type numeric comparison\r\n* Update to the latest version of ANTLR\r\n  * antlr: drop rules_antlr for custom rules [#153]\r\n  * antlr: patch rule for external consumption [#154]\r\n\r\n## New Contributors\r\n* @keith made their first contribution in https://github.com/google/cel-cpp/pull/134\r\n\r\n**Full Changelog**: https://github.com/google/cel-cpp/compare/v0.7.0...v0.8.0","mentions_count":1},{"url":"https://api.github.com/repos/google/cel-cpp/releases/51181980","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/51181980/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/51181980/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.7.0","id":51181980,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOB0DY7M4DDPmc","tag_name":"v0.7.0","target_commitish":"master","name":"Release v0.7.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-10-07T03:38:24Z","published_at":"2021-10-12T04:40:46Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.7.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.7.0","body":"This release is primarily focused on security hardening and dead code elimination. \r\n\r\n## Fixes\r\n\r\n* Limit the number of characters that may be read when attempting error recovery (635951c)\r\n* Set the default comprehension iteration limit to 10000 (83fb851)\r\n* Check all arithmetic operations and type conversions for overflow (99ebd43)\r\n* Reject Timestamp values outside the string-expressible range \r\n* Reject Duration values which cannot be expressed within an `int64` value\r\n* Heap buffer overrun for specialized binary and ternary operators (dfe31a4)\r\n* Ensure only valid map keys are supported in `CreateStruct` (3261a58)\r\n\r\n## Cleanups\r\n\r\nThis release also removes dependencies on the `v1beta1` protos and deletes a lot of\r\nrelated code which was otherwise used within CEL.\r\n"},{"url":"https://api.github.com/repos/google/cel-cpp/releases/45369002","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/45369002/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/45369002/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.6.1","id":45369002,"author":{"login":"kyessenov","id":9537734,"node_id":"MDQ6VXNlcjk1Mzc3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/9537734?v=4","gravatar_id":"","url":"https://api.github.com/users/kyessenov","html_url":"https://github.com/kyessenov","followers_url":"https://api.github.com/users/kyessenov/followers","following_url":"https://api.github.com/users/kyessenov/following{/other_user}","gists_url":"https://api.github.com/users/kyessenov/gists{/gist_id}","starred_url":"https://api.github.com/users/kyessenov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kyessenov/subscriptions","organizations_url":"https://api.github.com/users/kyessenov/orgs","repos_url":"https://api.github.com/users/kyessenov/repos","events_url":"https://api.github.com/users/kyessenov/events{/privacy}","received_events_url":"https://api.github.com/users/kyessenov/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTQ1MzY5MDAy","tag_name":"v0.6.1","target_commitish":"master","name":"Release v0.6.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-06-28T16:16:01Z","published_at":"2021-06-28T16:18:43Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.6.1","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.6.1","body":"Patch release with the following fixes:\r\n\r\n## Fixes\r\n- ensure compatibility with non-aliased `absl` and `std` types;\r\n- fix harmless undefined behavior on empty string_view access.\r\n"},{"url":"https://api.github.com/repos/google/cel-cpp/releases/45264044","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/45264044/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/45264044/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.6.0","id":45264044,"author":{"login":"kyessenov","id":9537734,"node_id":"MDQ6VXNlcjk1Mzc3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/9537734?v=4","gravatar_id":"","url":"https://api.github.com/users/kyessenov","html_url":"https://github.com/kyessenov","followers_url":"https://api.github.com/users/kyessenov/followers","following_url":"https://api.github.com/users/kyessenov/following{/other_user}","gists_url":"https://api.github.com/users/kyessenov/gists{/gist_id}","starred_url":"https://api.github.com/users/kyessenov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kyessenov/subscriptions","organizations_url":"https://api.github.com/users/kyessenov/orgs","repos_url":"https://api.github.com/users/kyessenov/repos","events_url":"https://api.github.com/users/kyessenov/events{/privacy}","received_events_url":"https://api.github.com/users/kyessenov/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTQ1MjY0MDQ0","tag_name":"v0.6.0","target_commitish":"master","name":"Release v0.6.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-06-10T19:28:16Z","published_at":"2021-06-25T23:30:15Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.6.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.6.0","body":"This is a minor release with the following changes:\r\n\r\n## Fixes\r\n- [61aeb51a2d8ae19738684fe18046fe965562d560] Fix literal integer constant suffix.\r\n- [d20e1ef3b080ce402d93fa4155b771ecb1e4daea] Lower the size of the input expression to 100k codepoints.\r\n- [6faa5a0ba698c18e189ff28f605c06b7da0c2d69] Update `CreateContainerBackedMap` to use `absl::StatusOr` and fix `ValueToCelValue`.\r\n\r\n## Changes\r\n- [30af72e187dbb80ca23a5e9d3d4edc6638c741fc] Default enable <string>.size() to return the number of unicode codepoints instead of the number of bytes.\r\n- [4f3bddffeb9e887121dac45459149a91cf58c1bc] Delete debug_string library. Prefer the `CelValue.DebugString()` method.\r\n- [e972c4b6dd3b3b09c18f42de2c2067acde696ca5] Introduce new `Has` method for presence testing on `CelMap` values.\r\n"},{"url":"https://api.github.com/repos/google/cel-cpp/releases/40783879","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/40783879/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/40783879/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.5.0","id":40783879,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTQwNzgzODc5","tag_name":"v0.5.0","target_commitish":"master","name":"Release v0.5.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-03-31T20:11:06Z","published_at":"2021-03-31T20:30:38Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.5.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.5.0","body":"Latest release of cel-cpp which raises cel-spec conformance from 78% to 94.2%. The major boost in coverage is support for serializing `CelValue` objects to the appropriate protobuf type, including to `google.protobuf.Struct` values.\r\n\r\nAdditionally, there are a number of hardening fixes for the parser and evaluator to address issues found by public and private fuzzers.\r\n\r\n## Fixes\r\n\r\n* [#85]  The macro exists_one should not short-circuit false.\r\n* [#86]  Map macro may produce empty values instead of erroring.\r\n* [#94]  Missing `string()` conversion for timestamps and durations.\r\n* [#96]  Proto2/3 well-known type conversion support to CEL values\r\n* [#104] duration() allows inf / -inf values \r\n* [[663c2d8](https://github.com/google/cel-cpp/pull/120/commits/663c2d83a0baa5a6128d012ab6bb46fd014c1b58)] Use unicode code point count for `<string>.size()`\r\n\r\n## Features\r\n\r\n* [[8ad13052](https://github.com/google/cel-cpp/pull/120/commits/8ad130527ca68fd1c1c4108e794bf488dee5b86d)] Introduce an error recovery limit for the CEL Parser."},{"url":"https://api.github.com/repos/google/cel-cpp/releases/37110801","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/37110801/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/37110801/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.4.0","id":37110801,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM3MTEwODAx","tag_name":"v0.4.0","target_commitish":"master","name":"Release v0.4.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-01-29T02:17:37Z","published_at":"2021-01-30T00:09:11Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.4.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.4.0","body":"## Fixes\r\n\r\n* [e53c05c](https://github.com/google/cel-cpp/commit/e53c05c61b201f683fe4bec80f6cbd0f99bdcf32) Enforce utf-8 validity in `string()` conversion of `bytes`.\r\n* [bca699e](https://github.com/google/cel-cpp/commit/bca699e41525b6040988a7646b3517bb8fff9840) Introduce `TypeRegistry` with support for the `type()` function and message creation within a container.\r\n* [f347557](https://github.com/google/cel-cpp/commit/f34755776c0485b4a5660ab4392dffa7be4f7c60) Apply clang-tidy suggestions.\r\n\r\nThe introduction of a `TypeRegistry` makes it possible to register the type names of protobuf messages, or other types, as identifiers that can be used within CEL expressions. This is the primary motivation for the creation of a new release, rather than a point release."},{"url":"https://api.github.com/repos/google/cel-cpp/releases/35454300","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/35454300/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/35454300/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.3.1","id":35454300,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM1NDU0MzAw","tag_name":"v0.3.1","target_commitish":"master","name":"Release v0.3.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-12-17T19:08:55Z","published_at":"2020-12-18T03:43:05Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.3.1","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.3.1","body":"This release fixes bugs and implements functions and features which are supported by the core CEL specification.\r\n\r\n## Fixes\r\n\r\n* [Parser] Hex integer notation support.\r\n* [Conformance] Pipe protocol for evaluation, removing gRPC dependency.\r\n* [Interpreter] Ensure the lifecycle of rewritten expressions is preserved in `CelExpression` values.\r\n* [Interpreter] Division by zero support for doubles, per IEEE754.\r\n\r\n## Features\r\n\r\n* [Parser] Stable ordering of error messages.\r\n* [Interpreter] Type conversion support for `uint()`, `double()`, `bytes()`, and `dyn()` types.\r\n"},{"url":"https://api.github.com/repos/google/cel-cpp/releases/34436499","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/34436499/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/34436499/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.3.0","id":34436499,"author":{"login":"kyessenov","id":9537734,"node_id":"MDQ6VXNlcjk1Mzc3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/9537734?v=4","gravatar_id":"","url":"https://api.github.com/users/kyessenov","html_url":"https://github.com/kyessenov","followers_url":"https://api.github.com/users/kyessenov/followers","following_url":"https://api.github.com/users/kyessenov/following{/other_user}","gists_url":"https://api.github.com/users/kyessenov/gists{/gist_id}","starred_url":"https://api.github.com/users/kyessenov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kyessenov/subscriptions","organizations_url":"https://api.github.com/users/kyessenov/orgs","repos_url":"https://api.github.com/users/kyessenov/repos","events_url":"https://api.github.com/users/kyessenov/events{/privacy}","received_events_url":"https://api.github.com/users/kyessenov/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM0NDM2NDk5","tag_name":"v0.3.0","target_commitish":"master","name":"Release v0.3.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-11-25T01:22:41Z","published_at":"2020-11-25T21:43:51Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.3.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.3.0","body":"# Notable changes\r\n\r\n- C++17 is required to build the project\r\n- Fix a race condition in protobuf map accessor, occurring during concurrent access to a shared map (https://github.com/google/cel-cpp/commit/6dfb7c8cc98d029d21b0c6ebd4d8d7a959ca1641)\r\n- Enforce recursion limits in parsing\r\n- Fix integer overflow on type conversions from double, uint values\r\n- Fix signed and unsigned integer overflow cases within C++ evaluator\r\n- Enable timestamp tests and add support for fixed timezones\r\n- Added support for bool keys to FieldBackedMapImpl\r\n- Update the has() macro support for C++ and fix enum resolution behavior when the qualified enum id is encoded within an identifier and not just within parse-only select expressions\r\n- Makes CEL parser tolerate trailing commas in struct constructors\r\n- Added support for `CelType`\r\n- Refactor protobuf wrapper to `CelProtoWrapper`\r\n- Removed gRPC as a build requirement, conformance is validated using raw pipes."},{"url":"https://api.github.com/repos/google/cel-cpp/releases/26397963","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/26397963/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/26397963/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.2.0","id":26397963,"author":{"login":"TristonianJones","id":483300,"node_id":"MDQ6VXNlcjQ4MzMwMA==","avatar_url":"https://avatars.githubusercontent.com/u/483300?v=4","gravatar_id":"","url":"https://api.github.com/users/TristonianJones","html_url":"https://github.com/TristonianJones","followers_url":"https://api.github.com/users/TristonianJones/followers","following_url":"https://api.github.com/users/TristonianJones/following{/other_user}","gists_url":"https://api.github.com/users/TristonianJones/gists{/gist_id}","starred_url":"https://api.github.com/users/TristonianJones/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TristonianJones/subscriptions","organizations_url":"https://api.github.com/users/TristonianJones/orgs","repos_url":"https://api.github.com/users/TristonianJones/repos","events_url":"https://api.github.com/users/TristonianJones/events{/privacy}","received_events_url":"https://api.github.com/users/TristonianJones/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTI2Mzk3OTYz","tag_name":"v0.2.0","target_commitish":"master","name":"Release v0.2.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-05-11T20:08:53Z","published_at":"2020-05-11T20:23:08Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.2.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.2.0","body":"## Features\r\n\r\n* FlatBuffers support.\r\n* Enriched parsing support for capturing the end position of parse tokens in addition to the start positions.\r\n* Expose an option to the `Activation` binding helper for configuring whether unset proto fields are exposed as their default values. \r\n\r\n## Fixes\r\n\r\n* Upgrade the ANTLR C++ runtime to v4.7.2 to fix a thread-safety issue.\r\n* Added an `alwayslink = 1` flag to ensure bazel builds work on OS X.\r\n* Migrate towards `absl::Status` \r\n* Fix unknown handling to consider whether a function is strict / non-strict"},{"url":"https://api.github.com/repos/google/cel-cpp/releases/25102627","assets_url":"https://api.github.com/repos/google/cel-cpp/releases/25102627/assets","upload_url":"https://uploads.github.com/repos/google/cel-cpp/releases/25102627/assets{?name,label}","html_url":"https://github.com/google/cel-cpp/releases/tag/v0.1.0","id":25102627,"author":{"login":"kyessenov","id":9537734,"node_id":"MDQ6VXNlcjk1Mzc3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/9537734?v=4","gravatar_id":"","url":"https://api.github.com/users/kyessenov","html_url":"https://github.com/kyessenov","followers_url":"https://api.github.com/users/kyessenov/followers","following_url":"https://api.github.com/users/kyessenov/following{/other_user}","gists_url":"https://api.github.com/users/kyessenov/gists{/gist_id}","starred_url":"https://api.github.com/users/kyessenov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kyessenov/subscriptions","organizations_url":"https://api.github.com/users/kyessenov/orgs","repos_url":"https://api.github.com/users/kyessenov/repos","events_url":"https://api.github.com/users/kyessenov/events{/privacy}","received_events_url":"https://api.github.com/users/kyessenov/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTI1MTAyNjI3","tag_name":"v0.1.0","target_commitish":"master","name":"Initial release of CEL C++ runtime","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-02-26T22:33:15Z","published_at":"2020-04-01T17:23:05Z","assets":[],"tarball_url":"https://api.github.com/repos/google/cel-cpp/tarball/v0.1.0","zipball_url":"https://api.github.com/repos/google/cel-cpp/zipball/v0.1.0","body":"This is the initial release of [CEL](https://github.com/google/cel-spec/) C++ runtime.\r\n\r\nSupported features:\r\n- interpreter runtime;\r\n- runtime complexity controls;\r\n- constant folding optimization pass;\r\n- adapter for protobuf messages;\r\n- parser implementation;\r\n- conformance to a subset of CEL specification."}]