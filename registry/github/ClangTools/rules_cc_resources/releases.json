[{"url":"https://api.github.com/repos/ClangTools/rules_cc_resources/releases/222269243","assets_url":"https://api.github.com/repos/ClangTools/rules_cc_resources/releases/222269243/assets","upload_url":"https://uploads.github.com/repos/ClangTools/rules_cc_resources/releases/222269243/assets{?name,label}","html_url":"https://github.com/ClangTools/rules_cc_resources/releases/tag/v0.2.0","id":222269243,"author":{"login":"kekxv","id":15551108,"node_id":"MDQ6VXNlcjE1NTUxMTA4","avatar_url":"https://avatars.githubusercontent.com/u/15551108?v=4","gravatar_id":"","url":"https://api.github.com/users/kekxv","html_url":"https://github.com/kekxv","followers_url":"https://api.github.com/users/kekxv/followers","following_url":"https://api.github.com/users/kekxv/following{/other_user}","gists_url":"https://api.github.com/users/kekxv/gists{/gist_id}","starred_url":"https://api.github.com/users/kekxv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kekxv/subscriptions","organizations_url":"https://api.github.com/users/kekxv/orgs","repos_url":"https://api.github.com/users/kekxv/repos","events_url":"https://api.github.com/users/kekxv/events{/privacy}","received_events_url":"https://api.github.com/users/kekxv/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOOtTX8c4NP487","tag_name":"v0.2.0","target_commitish":"main","name":"v0.2.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-06-01T09:06:05Z","updated_at":"2025-06-01T09:06:59Z","published_at":"2025-06-01T09:06:59Z","assets":[],"tarball_url":"https://api.github.com/repos/ClangTools/rules_cc_resources/tarball/v0.2.0","zipball_url":"https://api.github.com/repos/ClangTools/rules_cc_resources/zipball/v0.2.0","body":"## What's Changed\r\n* update README.md by @kekxv in https://github.com/ClangTools/rules_cc_resources/pull/2\r\n* add data type by @kekxv in https://github.com/ClangTools/rules_cc_resources/pull/3\r\n\r\n\r\n**Full Changelog**: https://github.com/ClangTools/rules_cc_resources/compare/v0.1.0...v0.2.0","mentions_count":1},{"url":"https://api.github.com/repos/ClangTools/rules_cc_resources/releases/219799550","assets_url":"https://api.github.com/repos/ClangTools/rules_cc_resources/releases/219799550/assets","upload_url":"https://uploads.github.com/repos/ClangTools/rules_cc_resources/releases/219799550/assets{?name,label}","html_url":"https://github.com/ClangTools/rules_cc_resources/releases/tag/v0.1.0","id":219799550,"author":{"login":"kekxv","id":15551108,"node_id":"MDQ6VXNlcjE1NTUxMTA4","avatar_url":"https://avatars.githubusercontent.com/u/15551108?v=4","gravatar_id":"","url":"https://api.github.com/users/kekxv","html_url":"https://github.com/kekxv","followers_url":"https://api.github.com/users/kekxv/followers","following_url":"https://api.github.com/users/kekxv/following{/other_user}","gists_url":"https://api.github.com/users/kekxv/gists{/gist_id}","starred_url":"https://api.github.com/users/kekxv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kekxv/subscriptions","organizations_url":"https://api.github.com/users/kekxv/orgs","repos_url":"https://api.github.com/users/kekxv/repos","events_url":"https://api.github.com/users/kekxv/events{/privacy}","received_events_url":"https://api.github.com/users/kekxv/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOOtTX8c4NGd_-","tag_name":"v0.1.0","target_commitish":"main","name":"v0.1.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-05-20T14:08:22Z","updated_at":"2025-05-20T14:10:52Z","published_at":"2025-05-20T14:10:52Z","assets":[],"tarball_url":"https://api.github.com/repos/ClangTools/rules_cc_resources/tarball/v0.1.0","zipball_url":"https://api.github.com/repos/ClangTools/rules_cc_resources/zipball/v0.1.0","body":"# README.md\r\n\r\n## cc_resources Rule\r\n\r\nThe `cc_resources` rule in Bazel is designed for converting binary files into C/C++ source files and headers. This rule generates a pair of `.cpp` and `.h` files for each input binary file. These generated files define a C-compatible struct with the name, size, and data of the resource, which can then be used in your C/C++ code.\r\n\r\n### Usage\r\n\r\nHere is a brief overview of how to use the `cc_resources` rule in your Bazel build files.\r\n\r\n#### Rule Definition\r\n\r\nYou should define the `cc_resources` rule in your `BUILD.bazel` file with the required attributes:\r\n\r\n```python\r\ncc_resources(\r\n    name = \"my_resources\",\r\n    srcs = [\"path/to/resource1.bin\", \"path/to/resource2.bin\"],\r\n    out_prefix = \"my_res\",  # Optional prefix for generated file names\r\n    _tool = \"//tools:bin_to_cc\"  # Path to the conversion tool\r\n)\r\n```\r\n\r\n### Attributes\r\n\r\n- `srcs`: A mandatory list of input binary files that need to be converted. These files will be processed and transformed into C/C++ source files.\r\n\r\n- `out_prefix`: An optional string that specifies a prefix for the output file names and the corresponding C variable names. For example, if `out_prefix` is set to `ui` and the input is `icon.png`, the outputs will be named `ui_icon.h` and `ui_icon.cpp`, and the resource name will be `ui_icon`.\r\n\r\n- `_tool`: A label for the conversion tool that should be executed to process the binary files. By default, this is set to `//tools:bin_to_cc`, but it can be overridden to use a custom tool.\r\n\r\n### Output\r\n\r\nWhen you invoke the `cc_resources` rule, it generates:\r\n\r\n- `.h` files containing the C-compatible struct definitions, including resource metadata.\r\n- `.cpp` files implementing the logic to handle these resources.\r\n\r\n### Example\r\n\r\nGiven the following `BUILD.bazel` setup:\r\n\r\n```python\r\nload(\"//rules:defs.bzl\", \"cc_resources\")\r\n\r\ncc_resources(\r\n    name = \"image_resources\",\r\n    srcs = [\"images/logo.png\", \"images/background.png\"],\r\n    out_prefix = \"assets\"\r\n)\r\n```\r\n\r\nThis will produce the following files:\r\n\r\n- `assets_logo.h`\r\n- `assets_logo.cpp`\r\n- `assets_background.h`\r\n- `assets_background.cpp`\r\n\r\n### Conclusion\r\n\r\nThe `cc_resources` rule facilitates the integration of binary resources into C/C++ projects by automating the generation of corresponding source files, thereby streamlining resource management in Bazel builds."}]