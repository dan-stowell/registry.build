[{"url":"https://api.github.com/repos/facebook/rocksdb/releases/209174770","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/209174770/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/209174770/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.11.2","id":209174770,"author":{"login":"anand1976","id":33647610,"node_id":"MDQ6VXNlcjMzNjQ3NjEw","avatar_url":"https://avatars.githubusercontent.com/u/33647610?v=4","gravatar_id":"","url":"https://api.github.com/users/anand1976","html_url":"https://github.com/anand1976","followers_url":"https://api.github.com/users/anand1976/followers","following_url":"https://api.github.com/users/anand1976/following{/other_user}","gists_url":"https://api.github.com/users/anand1976/gists{/gist_id}","starred_url":"https://api.github.com/users/anand1976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anand1976/subscriptions","organizations_url":"https://api.github.com/users/anand1976/orgs","repos_url":"https://api.github.com/users/anand1976/repos","events_url":"https://api.github.com/users/anand1976/events{/privacy}","received_events_url":"https://api.github.com/users/anand1976/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Md8Dy","tag_name":"v9.11.2","target_commitish":"9.11.fb","name":"RocksDB 9.11.2 Release","draft":false,"prerelease":false,"created_at":"2025-03-29T21:42:01Z","published_at":"2025-03-29T21:45:52Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.11.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.11.2","body":"# Rocksdb Change Log\r\n> NOTE: Entries for next release do not go here. Follow instructions in `unreleased_history/README.txt`\r\n\r\n## 9.11.2 (03/29/2025)\r\nBump patch version to fix a mistake in the previous 9.11 release tag\r\n\r\n## 9.11.1 (02/19/2025)\r\n### New Features\r\n* Added the ability to plug-in a custom table reader implementation. See include/rocksdb/external_table_reader.h for more details.\r\n\r\n## 9.11.0 (01/17/2025)\r\n### New Features\r\n* Introduce CancelAwaitingJobs() in CompactionService interface which will allow users to implement cancellation of running remote compactions from the primary instance\r\n* Experimental feature: RocksDB now supports defining secondary indices, which are automatically maintained by the storage engine. Secondary indices provide a new customization point: applications can provide their own by implementing the new `SecondaryIndex` interface. See the `SecondaryIndex` API comments for more details. Note: this feature is currently only available in conjunction with write-committed pessimistic transactions, and `Merge` is not yet supported.\r\n* Provide a new option `track_and_verify_wals` to track and verify various information about WAL during WAL recovery. This is intended to be a better replacement to `track_and_verify_wals_in_manifest`.\r\n\r\n### Public API Changes\r\n* Add `io_buffer_size` to BackupEngineOptions to enable optimal configuration of IO size\r\n* Clean up all the references to `random_access_max_buffer_size`, related rules and all the clients wrappers. This option has been officially deprecated in 5.4.0.\r\n* Add `file_ingestion_nanos` and `file_ingestion_blocking_live_writes_nanos` in PerfContext to observe file ingestions\r\n* Offer new DB::Open and variants that use `std::unique_ptr<DB>*` output parameters and deprecate the old versions that use `DB**` output parameters.\r\n* The DB::DeleteFile API is officially deprecated.\r\n\r\n### Behavior Changes\r\n* For leveled compaction, manual compaction (CompactRange()) will be more strict about keeping compaction size under `max_compaction_bytes`. This prevents overly large compactions in some cases (#13306).\r\n* Experimental tiering options `preclude_last_level_data_seconds` and `preserve_internal_time_seconds` are now mutable with `SetOptions()`. Some changes to handling of these features along with long-lived snapshots and range deletes made this possible.\r\n\r\n### Bug Fixes\r\n* Fix a longstanding major bug with SetOptions() in which setting changes can be quietly reverted.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/209174770/reactions","total_count":4,"+1":2,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":1,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/192971290","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/192971290/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/192971290/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.10.0","id":192971290,"author":{"login":"archang19","id":39173193,"node_id":"MDQ6VXNlcjM5MTczMTkz","avatar_url":"https://avatars.githubusercontent.com/u/39173193?v=4","gravatar_id":"","url":"https://api.github.com/users/archang19","html_url":"https://github.com/archang19","followers_url":"https://api.github.com/users/archang19/followers","following_url":"https://api.github.com/users/archang19/following{/other_user}","gists_url":"https://api.github.com/users/archang19/gists{/gist_id}","starred_url":"https://api.github.com/users/archang19/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/archang19/subscriptions","organizations_url":"https://api.github.com/users/archang19/orgs","repos_url":"https://api.github.com/users/archang19/repos","events_url":"https://api.github.com/users/archang19/events{/privacy}","received_events_url":"https://api.github.com/users/archang19/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84LgIIa","tag_name":"v9.10.0","target_commitish":"main","name":"RocksDB 9.10.0 Release","draft":false,"prerelease":false,"created_at":"2025-01-02T18:23:48Z","published_at":"2025-01-02T18:31:00Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.10.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.10.0","body":"## 9.10.0 (2024-12-12)\r\n### New Features\r\n* Introduce `TransactionOptions::commit_bypass_memtable` to enable transaction commit to bypass memtable insertions. This can be beneficial for transactions with many operations, as it reduces commit time that is mostly spent on memtable insertion.\r\n### Public API Changes\r\n* Deprecated Remote Compaction APIs (StartV2, WaitForCompleteV2) are completely removed from the codebase\r\n### Behavior Changes\r\n* DB::KeyMayExist() now follows its function comment, which means `value` parameter can be null, and it will be set only if `value_found` is passed in.\r\n### Bug Fixes\r\n* Fix the issue where compaction incorrectly drops a key when there is a snapshot with a sequence number of zero.\r\n* Honor ConfigOptions.ignore_unknown_options in ParseStruct()\r\n### Performance Improvements\r\n* Enable reuse of file system allocated buffer for synchronous prefetching.\r\n* In buffered IO mode, try to align writes on power of 2 if checksum handoff is not enabled for the file type being written.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/192971290/reactions","total_count":19,"+1":7,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":3,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/191235396","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/191235396/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/191235396/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.9.3","id":191235396,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84LZgVE","tag_name":"v9.9.3","target_commitish":"main","name":"RocksDB release 9.9.3","draft":false,"prerelease":false,"created_at":"2024-12-17T18:04:45Z","published_at":"2024-12-17T18:06:55Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.9.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.9.3","body":"## 9.9.3 (2024-12-03)\r\n### Performance Improvements\r\n* In buffered IO mode, try to align writes on power of 2 if checksum handoff is not enabled for the file type being written.\r\n\r\n## 9.9.2 (2024-11-22)\r\n### Bug Fixes\r\n* Honor ConfigOptions.ignore_unknown_options in ParseStruct()\r\n\r\n## 9.9.1 (2024-11-30)\r\n### Behavior Changes\r\n* Updates the hidden hook RocksDbThreadYieldAndCheckAbort() to support MySQL to abort long-running query.\r\n\r\n## 9.9.0 (2024-11-18)\r\n### New Features\r\n* Multi-Column-Family-Iterator (CoalescingIterator/AttributeGroupIterator) is no longer marked as experimental\r\n* Adds a new table property \"rocksdb.newest.key.time\" which records the unix timestamp of the newest key. Uses this table property for FIFO TTL and temperature change compaction.\r\n\r\n### Public API Changes\r\n* Added a new API `Transaction::GetAttributeGroupIterator` that can be used to create a multi-column-family attribute group iterator over the specified column families, including the data from both the transaction and the underlying database. This API is currently supported for optimistic and write-committed pessimistic transactions.\r\n* Added a new API `Transaction::GetCoalescingIterator` that can be used to create a multi-column-family coalescing iterator over the specified column families, including the data from both the transaction and the underlying database. This API is currently supported for optimistic and write-committed pessimistic transactions.\r\n\r\n### Behavior Changes\r\n* `BaseDeltaIterator` now honors the read option `allow_unprepared_value`.\r\n\r\n### Bug Fixes\r\n* `BaseDeltaIterator` now calls `PrepareValue` on the base iterator in case it has been created with the `allow_unprepared_value` read option set. Earlier, such base iterators could lead to incorrect values being exposed from `BaseDeltaIterator`.\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version 9.4.0.\r\n* Fix missing cases of corruption retry during DB open and read API processing.\r\n* Fix a bug for transaction db with 2pc where an old WAL may be retained longer than needed (#13127).\r\n* Fix leaks of some open SST files (until `DB::Close()`) that are written but never become live due to various failures. (We now have a check for such leaks with no outstanding issues.)\r\n* Fix a bug for replaying WALs for WriteCommitted transaction DB when its user-defined timestamps setting is toggled on/off between DB sessions.\r\n\r\n### Performance Improvements\r\n* Fix regression in issue #12038 due to `Options::compaction_readahead_size` greater than `max_sectors_kb` (i.e, largest I/O size that the OS issues to a block device defined in linux)\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/191235396/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":3,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/188808593","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/188808593/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/188808593/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.8.4","id":188808593,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84LQP2R","tag_name":"v9.8.4","target_commitish":"main","name":"RocksDB 9.8.4","draft":false,"prerelease":false,"created_at":"2024-12-03T21:20:09Z","published_at":"2024-12-03T21:25:53Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.8.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.8.4","body":"## 9.8.4 (2024-11-18)\r\n### Behavior Changes\r\n* When Remote Compaction is enabled, do not purge OPTIONS file immediately by DeleteObsoleteOptionsFiles() after SetOptions(). Rely on PurgeObsoleteFiles() to clean up obsolete OPTIONS file after each compaction.\r\n\r\n## 9.8.3 (2024-11-12)\r\n### Bug Fixes\r\n* Fix missing cases of corruption retry during DB open and read API processing.\r\n\r\n## 9.8.2 (2024-11-06)\r\n### Public API Changes\r\n* Added a new API `Transaction::GetAttributeGroupIterator` that can be used to create a multi-column-family attribute group iterator over the specified column families, including the data from both the transaction and the underlying database. This API is currently supported for optimistic and write-committed pessimistic transactions.\r\n\r\n### Behavior Changes\r\n* `BaseDeltaIterator` now honors the read option `allow_unprepared_value`.\r\n\r\n### Bug Fixes\r\n* `BaseDeltaIterator` now calls `PrepareValue` on the base iterator in case it has been created with the `allow_unprepared_value` read option set. Earlier, such base iterators could lead to incorrect values being exposed from `BaseDeltaIterator`.\r\n* Fix a bug for replaying WALs for WriteCommitted transaction DB when its user-defined timestamps setting is toggled on/off between DB sessions.\r\n## 9.8.1 (2024-10-31)\r\n### Bug Fixes\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version \r\n9.4.0.\r\n\r\n## 9.8.0 (2024-10-25)\r\n### New Features\r\n* All non-`block_cache` options in `BlockBasedTableOptions` are now mutable with `DB::SetOptions()`.\r\n See also Bug Fixes below.\r\n* When using iterators with BlobDB, it is now possible to load large values on an on-demand basis, i\r\n.e. only if they are actually needed by the application. This can save I/O in use cases where the va\r\nlues associated with certain keys are not needed. For more details, see the new read option `allow_u\r\nnprepared_value` and the iterator API `PrepareValue`.\r\n* Add a new file ingestion option `IngestExternalFileOptions::fill_cache` to support not adding bloc\r\nks from ingested files into block cache during file ingestion.\r\n* The option `allow_unprepared_value` is now also supported for multi-column-family iterators (i.e. \r\n`CoalescingIterator` and `AttributeGroupIterator`).\r\n* When a file with just one range deletion (standalone range deletion file) is ingested via bulk loa\r\nding, it will be marked for compaction. During compaction, this type of files can be used to directl\r\ny filter out some input files that are not protected by any snapshots and completely deleted by the \r\nstandalone range deletion file.\r\n\r\n### Behavior Changes\r\n* During file ingestion, overlapping files level assignment are done in multiple batches, so that th\r\ney can potentially be assigned to lower levels other than always land on L0.\r\n* OPTIONS file to be loaded by remote worker is now preserved so that it does not get purged by the \r\nprimary host. A similar technique as how we are preserving new SST files from getting purged is used\r\n for this. min_options_file_numbers_ is tracked like pending_outputs_ is tracked.\r\n* Trim readahead_size during scans so data blocks containing keys that are not in the same prefix as\r\n the seek key in `Seek()` are not prefetched when `ReadOptions::auto_readahead_size=true` (default v\r\nalue) and `ReadOptions::prefix_same_as_start = true`\r\n* Assigning levels for external files are done in the same way for universal compaction and leveled \r\ncompaction. The old behavior tends to assign files to L0 while the new behavior will assign the file\r\ns to the lowest level possible.\r\n\r\n### Bug Fixes\r\n* Fix a longstanding race condition in SetOptions for `block_based_table_factory` options. The fix h\r\nas some subtle behavior changes because of copying and replacing the TableFactory on a change with S\r\netOptions, including requiring an Iterator::Refresh() for an existing Iterator to use the latest opt\r\nions.\r\n* Fix under counting of allocated memory in the compressed secondary cache due to looking at the com\r\npressed block size rather than the actual memory allocated, which could be larger due to internal fr\r\nagmentation.\r\n* `GetApproximateMemTableStats()` could return disastrously bad estimates 5-25% of the time. The fun\r\nction has been re-engineered to return much better estimates with similar CPU cost.\r\n* Skip insertion of compressed blocks in the secondary cache if the lowest_used_cache_tier DB option\r\n is kVolatileTier.\r\n* Fix an issue in level compaction where a small CF with small compaction debt can cause the DB to a\r\nllow parallel compactions. (#13054)\r\n* Several DB option settings could be lost through `GetOptionsFromString()`, possibly elsewhere as w\r\nell. Affected options, now fixed:`background_close_inactive_wals`, `write_dbid_to_manifest`, `write_\r\nidentity_file`, `prefix_seek_opt_in_only`","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/188808593/reactions","total_count":3,"+1":1,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183132707","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/183132707/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/183132707/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.7.4","id":183132707,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84K6mIj","tag_name":"v9.7.4","target_commitish":"main","name":"RocksDB 9.7.4","draft":false,"prerelease":false,"created_at":"2024-11-01T16:34:21Z","published_at":"2024-11-01T16:39:27Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.7.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.7.4","body":"## 9.7.4 (2024-10-31)\r\n### Bug Fixes\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version 9.4.0.\r\n\r\n## 9.7.3 (2024-10-16)\r\n### Behavior Changes\r\n* OPTIONS file to be loaded by remote worker is now preserved so that it does not get purged by the primary host. A similar technique as how we are preserving new SST files from getting purged is used for this. min_options_file_numbers_ is tracked like pending_outputs_ is tracked.\r\n\r\n## 9.7.2 (2024-10-08)\r\n### Bug Fixes\r\n* Fix a bug for surfacing write unix time: `Iterator::GetProperty(\"rocksdb.iterator.write-time\")` for non-L0 files.\r\n\r\n## 9.7.1 (2024-09-26)\r\n### Bug Fixes\r\n* Several DB option settings could be lost through `GetOptionsFromString()`, possibly elsewhere as well. Affected options, now fixed:`background_close_inactive_wals`, `write_dbid_to_manifest`, `write_identity_file`, `prefix_seek_opt_in_only`\r\n* Fix under counting of allocated memory in the compressed secondary cache due to looking at the compressed block size rather than the actual memory allocated, which could be larger due to internal fragmentation.\r\n* Skip insertion of compressed blocks in the secondary cache if the lowest_used_cache_tier DB option is kVolatileTier.\r\n\r\n## 9.7.0 (2024-09-20)\r\n### New Features\r\n* Make Cache a customizable class that can be instantiated by the object registry.\r\n* Add new option `prefix_seek_opt_in_only` that makes iterators generally safer when you might set a `prefix_extractor`. When `prefix_seek_opt_in_only=true`, which is expected to be the future default, prefix seek is only used when `prefix_same_as_start` or `auto_prefix_mode` are set. Also, `prefix_same_as_start` and `auto_prefix_mode` now allow prefix filtering even with `total_order_seek=true`.\r\n* Add a new table property \"rocksdb.key.largest.seqno\" which records the largest sequence number of all keys in file. It is verified to be zero during SST file ingestion.\r\n\r\n### Behavior Changes\r\n* Changed the semantics of the BlobDB configuration option `blob_garbage_collection_force_threshold` to define \r\na threshold for the overall garbage ratio of all blob files currently eligible for garbage collection (accordin\r\ng to `blob_garbage_collection_age_cutoff`). This can provide better control over space amplification at the cos\r\nt of slightly higher write amplification.\r\n* Set `write_dbid_to_manifest=true` by default. This means DB ID will now be preserved through backups, checkpo\r\nints, etc. by default. Also add `write_identity_file` option which can be set to false for anticipated future b\r\nehavior.\r\n* In FIFO compaction, compactions for changing file temperature (configured by option `file_temperature_age_thr\r\nesholds`) will compact one file at a time, instead of merging multiple eligible file together (#13018).\r\n* Support ingesting db generated files using hard link, i.e. IngestExternalFileOptions::move_files/link_files a\r\nnd IngestExternalFileOptions::allow_db_generated_files.\r\n* Add a new file ingestion option `IngestExternalFileOptions::link_files` to hard link input files and preserve\r\n original files links after ingestion.\r\n* DB::Close now untracks files in SstFileManager, making avaialble any space used\r\nby them. Prior to this change they would be orphaned until the DB is re-opened.\r\n\r\n### Bug Fixes\r\n* Fix a bug in CompactRange() where result files may not be compacted in any future compaction. This can only h\r\nappen when users configure CompactRangeOptions::change_level to true and the change level step of manual compac\r\ntion fails (#13009).\r\n* Fix handling of dynamic change of `prefix_extractor` with memtable prefix filter. Previously, prefix seek cou\r\nld mix different prefix interpretations between memtable and SST files. Now the latest `prefix_extractor` at th\r\ne time of iterator creation or refresh is respected.\r\n* Fix a bug with manual_wal_flush and auto error recovery from WAL failure that may cause CFs to be inconsisten\r\nt (#12995). The fix will set potential WAL write failure as fatal error when manual_wal_flush is true, and disa\r\nbles auto error recovery from these errors.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183132707/reactions","total_count":10,"+1":3,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":1,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183128063","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/183128063/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/183128063/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.6.2","id":183128063,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84K6k__","tag_name":"v9.6.2","target_commitish":"main","name":"RocksDB 9.6.2","draft":false,"prerelease":false,"created_at":"2024-11-01T15:59:43Z","published_at":"2024-11-01T16:06:40Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.6.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.6.2","body":"## 9.6.2 (10/31/2024)\r\n### Bug Fixes\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version 9.4.0.\r\n\r\n## 9.6.1 (08/24/2024)\r\n### Bug Fixes\r\n* Fix correctness of MultiGet across column families with user timestamp.\r\n\r\n## 9.6.0 (08/19/2024)\r\n### New Features\r\n* *Best efforts recovery supports recovering to incomplete Version with a clean seqno cut that presents a valid point in time view from the user's perspective, if versioning history doesn't include atomic flush.\r\n* New option `BlockBasedTableOptions::decouple_partitioned_filters` should improve efficiency in serving read queries because filter and index partitions can consistently target the configured `metadata_block_size`. This option is currently opt-in.\r\n* Introduce a new mutable CF option `paranoid_memory_checks`. It enables additional validation on data integrity during reads/scanning. Currently, skip list based memtable will validate key ordering during look up and scans.\r\n\r\n### Public API Changes\r\n* Add ticker stats to count file read retries due to checksum mismatch\r\n* Adds optional installation callback function for remote compaction\r\n\r\n### Behavior Changes\r\n* There may be less intra-L0 compaction triggered by total L0 size being too small. We now use compensated file size (tombstones are assigned some value size) when calculating L0 size and reduce the threshold for L0 size limit. This is to avoid accumulating too much data/tombstones in L0.\r\n\r\n### Bug Fixes\r\n* *Make DestroyDB supports slow deletion when it's configured in `SstFileManager`. The slow deletion is subject to the configured `rate_bytes_per_sec`, but not subject to the `max_trash_db_ratio`.\r\n* Fixed a bug where we set unprep_seqs_ even when WriteImpl() fails. This was caught by stress test write fault injection in WriteImpl(). This may have incorrectly caused iteration creation failure for unvalidated writes or returned wrong result for WriteUnpreparedTxn::GetUnpreparedSequenceNumbers().\r\n* Fixed a bug where successful write right after error recovery for last failed write finishes causes duplicate WAL entries\r\n* Fixed a data race involving the background error status in `unordered_write` mode.\r\n* *Fix a bug where file snapshot functions like backup, checkpoint may attempt to copy a non-existing manifest \r\nfile. #12882\r\n* Fix a bug where per kv checksum corruption may be ignored in MultiGet().\r\n* Fix a race condition in pessimistic transactions that could allow multiple transactions with the same name to\r\n be registered simultaneously, resulting in a crash or other unpredictable behavior.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183128063/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":1,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/179868289","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/179868289/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/179868289/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.7.3","id":179868289,"author":{"login":"ltamasi","id":47607618,"node_id":"MDQ6VXNlcjQ3NjA3NjE4","avatar_url":"https://avatars.githubusercontent.com/u/47607618?v=4","gravatar_id":"","url":"https://api.github.com/users/ltamasi","html_url":"https://github.com/ltamasi","followers_url":"https://api.github.com/users/ltamasi/followers","following_url":"https://api.github.com/users/ltamasi/following{/other_user}","gists_url":"https://api.github.com/users/ltamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ltamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ltamasi/subscriptions","organizations_url":"https://api.github.com/users/ltamasi/orgs","repos_url":"https://api.github.com/users/ltamasi/repos","events_url":"https://api.github.com/users/ltamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ltamasi/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84KuJKB","tag_name":"v9.7.3","target_commitish":"main","name":"RocksDB 9.7.3","draft":false,"prerelease":false,"created_at":"2024-10-17T20:40:11Z","published_at":"2024-10-14T17:43:41Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.7.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.7.3","body":"## 9.7.3 (2024-10-16)\r\n### Behavior Changes\r\n* OPTIONS file to be loaded by remote worker is now preserved so that it does not get purged by the primary host. A similar technique as how we are preserving new SST files from getting purged is used for this. min_options_file_numbers_ is tracked like pending_outputs_ is tracked.\r\n\r\n## 9.7.2 (2024-08-10)\r\n### Bug Fixes\r\n* Fix a bug for surfacing write unix time: `Iterator::GetProperty(\"rocksdb.iterator.write-time\")` for non-L0 files.\r\n\r\n## 9.7.1 (2024-09-26)\r\n### Bug Fixes\r\n* Several DB option settings could be lost through `GetOptionsFromString()`, possibly elsewhere as well. Affected options, now fixed:`background_close_inactive_wals`, `write_dbid_to_manifest`, `write_identity_file`, `prefix_seek_opt_in_only`\r\n* Fix under counting of allocated memory in the compressed secondary cache due to looking at the compressed block size rather than the actual memory allocated, which could be larger due to internal fragmentation.\r\n* Skip insertion of compressed blocks in the secondary cache if the lowest_used_cache_tier DB option is kVolatileTier.\r\n\r\n## 9.7.0 (2024-09-20)\r\n### New Features\r\n* Make Cache a customizable class that can be instantiated by the object registry.\r\n* Add new option `prefix_seek_opt_in_only` that makes iterators generally safer when you might set a `prefix_extractor`. When `prefix_seek_opt_in_only=true`, which is expected to be the future default, prefix seek is only used when `prefix_same_as_start` or `auto_prefix_mode` are set. Also, `prefix_same_as_start` and `auto_prefix_mode` now allow prefix filtering even with `total_order_seek=true`.\r\n* Add a new table property \"rocksdb.key.largest.seqno\" which records the largest sequence number of all keys in file. It is verified to be zero during SST file ingestion.\r\n\r\n### Behavior Changes\r\n* Changed the semantics of the BlobDB configuration option `blob_garbage_collection_force_threshold` to define a threshold for the overall garbage ratio of all blob files currently eligible for garbage collection (according to `blob_garbage_collection_age_cutoff`). This can provide better control over space amplification at the cost of slightly higher write amplification.\r\n* Set `write_dbid_to_manifest=true` by default. This means DB ID will now be preserved through backups, checkpoints, etc. by default. Also add `write_identity_file` option which can be set to false for anticipated future behavior.\r\n* In FIFO compaction, compactions for changing file temperature (configured by option `file_temperature_age_thresholds`) will compact one file at a time, instead of merging multiple eligible file together (#13018).\r\n* Support ingesting db generated files using hard link, i.e. IngestExternalFileOptions::move_files/link_files and IngestExternalFileOptions::allow_db_generated_files.\r\n* Add a new file ingestion option `IngestExternalFileOptions::link_files` to hard link input files and preserve original files links after ingestion.\r\n* DB::Close now untracks files in SstFileManager, making avaialble any space used\r\nby them. Prior to this change they would be orphaned until the DB is re-opened.\r\n\r\n### Bug Fixes\r\n* Fix a bug in CompactRange() where result files may not be compacted in any future compaction. This can only happen when users configure CompactRangeOptions::change_level to true and the change level step of manual compaction fails (#13009).\r\n* Fix handling of dynamic change of `prefix_extractor` with memtable prefix filter. Previously, prefix seek could mix different prefix interpretations between memtable and SST files. Now the latest `prefix_extractor` at the time of iterator creation or refresh is respected.\r\n* Fix a bug with manual_wal_flush and auto error recovery from WAL failure that may cause CFs to be inconsistent (#12995). The fix will set potential WAL write failure as fatal error when manual_wal_flush is true, and disables auto error recovery from these errors.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/179868289/reactions","total_count":13,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":4,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/173898088","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/173898088/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/173898088/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.6.1","id":173898088,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84KXXlo","tag_name":"v9.6.1","target_commitish":"main","name":"RocksDB 9.6.1","draft":false,"prerelease":false,"created_at":"2024-09-06T18:08:46Z","published_at":"2024-09-06T18:11:59Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.6.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.6.1","body":"## 9.6.1 (2024-08-24)\r\n### Bug Fixes\r\n* Fix correctness of MultiGet across column families with user timestamp.\r\n\r\n## 9.6.0 (2024-08-19)\r\n### New Features\r\n* *Best efforts recovery supports recovering to incomplete Version with a clean seqno cut that presents a valid point in time view from the user's perspective, if versioning history doesn't include atomic flush.\r\n* New option `BlockBasedTableOptions::decouple_partitioned_filters` should improve efficiency in serving read queries because filter and index partitions can consistently target the configured `metadata_block_size`. This option is currently opt-in.\r\n* Introduce a new mutable CF option `paranoid_memory_checks`. It enables additional validation on data integrity during reads/scanning. Currently, skip list based memtable will validate key ordering during look up and scans.\r\n\r\n### Public API Changes\r\n* Add ticker stats to count file read retries due to checksum mismatch\r\n* Adds optional installation callback function for remote compaction\r\n\r\n### Behavior Changes\r\n* There may be less intra-L0 compaction triggered by total L0 size being too small. We now use compensated file size (tombstones are assigned some value size) when calculating L0 size and reduce the threshold for L0 size limit. This is to avoid accumulating too much data/tombstones in L0.\r\n\r\n### Bug Fixes\r\n* *Make DestroyDB supports slow deletion when it's configured in `SstFileManager`. The slow deletion is subject to the configured `rate_bytes_per_sec`, but not subject to the `max_trash_db_ratio`.\r\n* Fixed a bug where we set unprep_seqs_ even when WriteImpl() fails. This was caught by stress test write fault injection in WriteImpl(). This may have incorrectly caused iteration creation failure for unvalidated writes or returned wrong result for WriteUnpreparedTxn::GetUnpreparedSequenceNumbers().\r\n* Fixed a bug where successful write right after error recovery for last failed write finishes causes duplicate WAL entries\r\n* Fixed a data race involving the background error status in `unordered_write` mode.\r\n* *Fix a bug where file snapshot functions like backup, checkpoint may attempt to copy a non-existing manifest file. #12882\r\n* Fix a bug where per kv checksum corruption may be ignored in MultiGet().\r\n* Fix a race condition in pessimistic transactions that could allow multiple transactions with the same name to be registered simultaneously, resulting in a crash or other unpredictable behavior.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/173898088/reactions","total_count":8,"+1":0,"-1":0,"laugh":0,"hooray":5,"confused":0,"heart":3,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/171297416","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/171297416/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/171297416/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.5.2","id":171297416,"author":{"login":"hx235","id":83968999,"node_id":"MDQ6VXNlcjgzOTY4OTk5","avatar_url":"https://avatars.githubusercontent.com/u/83968999?v=4","gravatar_id":"","url":"https://api.github.com/users/hx235","html_url":"https://github.com/hx235","followers_url":"https://api.github.com/users/hx235/followers","following_url":"https://api.github.com/users/hx235/following{/other_user}","gists_url":"https://api.github.com/users/hx235/gists{/gist_id}","starred_url":"https://api.github.com/users/hx235/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hx235/subscriptions","organizations_url":"https://api.github.com/users/hx235/orgs","repos_url":"https://api.github.com/users/hx235/repos","events_url":"https://api.github.com/users/hx235/events{/privacy}","received_events_url":"https://api.github.com/users/hx235/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84KNcqI","tag_name":"v9.5.2","target_commitish":"main","name":"RocksDB 9.5.2","draft":false,"prerelease":false,"created_at":"2024-08-21T15:27:54Z","published_at":"2024-08-21T15:10:36Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.5.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.5.2","body":"## 9.5.2 (2024-08-13)\r\n### Bug Fixes\r\n* Fix a race condition in pessimistic transactions that could allow multiple transactions with the same name to be registered simultaneously, resulting in a crash or other unpredictable behavior.\r\n\r\n### Public API Changes\r\n* Add ticker stats to count file read retries due to checksum mismatch\r\n\r\n## 9.5.1 (2024-08-02)\r\n### Bug Fixes\r\n* *Make DestroyDB supports slow deletion when it's configured in `SstFileManager`. The slow deletion is subject to the configured `rate_bytes_per_sec`, but not subject to the `max_trash_db_ratio`.\r\n\r\n## 9.5.0 (2024-07-19)\r\n### Public API Changes\r\n* Introduced new C API function rocksdb_writebatch_iterate_cf for column family-aware iteration over the contents of a WriteBatch\r\n* Add support to ingest SST files generated by a DB instead of SstFileWriter. This can be enabled with experimental option `IngestExternalFileOptions::allow_db_generated_files`.\r\n\r\n### Behavior Changes\r\n* When calculating total log size for the `log_size_for_flush` argument in `CreateCheckpoint` API, the size of the archived log will not be included to avoid unnecessary flush\r\n\r\n### Bug Fixes\r\n* Fix a major bug in which an iterator using prefix filtering and SeekForPrev might miss data when the DB is using `whole_key_filtering=false` and `partition_filters=true`.\r\n* Fixed a bug where `OnErrorRecoveryBegin()` is not called before auto recovery starts.\r\n* Fixed a bug where event listener reads ErrorHandler's `bg_error_` member without holding db mutex(#12803).\r\n* Fixed a bug in handling MANIFEST write error that caused the latest valid MANIFEST file to get deleted, resulting in the DB being unopenable.\r\n* Fixed a race between error recovery due to manifest sync or write failure and external SST file ingestion. Both attempt to write a new manifest file, which causes an assertion failure.\r\n\r\n### Performance Improvements\r\n* Fix an issue where compactions were opening table files and reading table properties while holding db mutex_.\r\n* Reduce unnecessary filesystem queries and DB mutex acquires in creating backups and checkpoints.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/171297416/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/165265553","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/165265553/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/165265553/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.4.0","id":165265553,"author":{"login":"cbi42","id":102700264,"node_id":"U_kgDOBh8U6A","avatar_url":"https://avatars.githubusercontent.com/u/102700264?v=4","gravatar_id":"","url":"https://api.github.com/users/cbi42","html_url":"https://github.com/cbi42","followers_url":"https://api.github.com/users/cbi42/followers","following_url":"https://api.github.com/users/cbi42/following{/other_user}","gists_url":"https://api.github.com/users/cbi42/gists{/gist_id}","starred_url":"https://api.github.com/users/cbi42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbi42/subscriptions","organizations_url":"https://api.github.com/users/cbi42/orgs","repos_url":"https://api.github.com/users/cbi42/repos","events_url":"https://api.github.com/users/cbi42/events{/privacy}","received_events_url":"https://api.github.com/users/cbi42/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84J2cCR","tag_name":"v9.4.0","target_commitish":"9.4.fb","name":"RocksDB 9.4.0","draft":false,"prerelease":false,"created_at":"2024-06-24T23:48:34Z","published_at":"2024-07-12T23:07:26Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.4.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.4.0","body":"## 9.4.0 (2024-06-23)\r\n### New Features\r\n* Added a `CompactForTieringCollectorFactory` to auto trigger compaction for tiering use case.\r\n* Optimistic transactions and pessimistic transactions with the WriteCommitted policy now support the `GetEntityForUpdate` API.\r\n* Added a new \"count\" command to the ldb repl shell. By default, it prints a count of keys in the database from start to end. The options --from=<key> and/or --to=<key> can be specified to limit the range.\r\n* Add `rocksdb_writebatch_update_timestamps`, `rocksdb_writebatch_wi_update_timestamps` in C API.\r\n* Add `rocksdb_iter_refresh` in C API.\r\n* Add `rocksdb_writebatch_create_with_params`, `rocksdb_writebatch_wi_create_with_params` to create WB and WBWI with all options in C API\r\n\r\n### Public API Changes\r\n* Deprecated names `LogFile` and `VectorLogPtr` in favor of new names `WalFile` and `VectorWalPtr`.\r\n* Introduce a new universal compaction option CompactionOptionsUniversal::max_read_amp which allows user to define the limit on the number of sorted runs separately from the trigger for compaction (`level0_file_num_compaction_trigger`) #12477.\r\n\r\n### Behavior Changes\r\n* Inactive WALs are immediately closed upon being fully sync-ed rather than in a background thread. This is to ensure LinkFile() is not called on files still open for write, which might not be supported by some FileSystem implementations. This should not be a performance issue, but an opt-out is available with with new DB option `background_close_inactive_wals`.\r\n\r\n### Bug Fixes\r\n* Fix a rare case in which a hard-linked WAL in a Checkpoint is not fully synced (so might lose data on power loss).\r\n* Fixed the output of the `ldb dump_wal` command for `PutEntity` records so it prints the key and correctly resets the hexadecimal formatting flag after printing the wide-column entity.\r\n* Fixed an issue where `PutEntity` records were handled incorrectly while rebuilding transactions during recovery.\r\n* Various read operations could ignore various ReadOptions that might be relevant. Fixed many such cases, which can result in behavior change but a better reflection of specified options.\r\n\r\n### Performance Improvements\r\n* Improved write throughput to memtable when there's a large number of concurrent writers and allow_concurrent_memtable_write=true(#12545)","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/165265553/reactions","total_count":9,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":7,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/163059580","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/163059580/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/163059580/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.3.1","id":163059580,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JuBd8","tag_name":"v9.3.1","target_commitish":"9.3.fb","name":"RocksDB 9.3.1","draft":false,"prerelease":false,"created_at":"2024-06-04T18:43:02Z","published_at":"2024-06-28T20:38:18Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.3.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.3.1","body":"## 9.3.1 (2024-05-25)\r\n### Bug Fixes\r\n* [internal only] Build script improvement\r\n\r\n## 9.3.0 (2024-05-17)\r\n### New Features\r\n* Optimistic transactions and pessimistic transactions with the WriteCommitted policy now support the `GetEntity` API.\r\n* Added new `Iterator` property, \"rocksdb.iterator.is-value-pinned\", for checking whether the `Slice` returned by `Iterator::value()` can be used until the `Iterator` is destroyed.\r\n* Optimistic transactions and WriteCommitted pessimistic transactions now support the `MultiGetEntity` API.\r\n* Optimistic transactions and pessimistic transactions with the WriteCommitted policy now support the `PutEntity` API. Support for read APIs and other write policies (WritePrepared, WriteUnprepared) will be added later.\r\n\r\n### Public API Changes\r\n* Exposed block based metadata cache options via C API\r\n* Exposed compaction pri via c api.\r\n* Add a kAdmPolicyAllowAll option to TieredAdmissionPolicy that admits all blocks evicted from the primary block cache into the compressed secondary cache.\r\n\r\n### Behavior Changes\r\n* CompactRange() with change_level=true on a CF with FIFO compaction will return Status::NotSupported().\r\n* External file ingestion with FIFO compaction will always ingest to L0.\r\n\r\n### Bug Fixes\r\n* Fixed a bug for databases using `DBOptions::allow_2pc == true` (all `TransactionDB`s except `OptimisticTransactionDB`) that have exactly one column family. Due to a missing WAL sync, attempting to open the DB could have returned a `Status::Corruption` with a message like \"SST file is ahead of WALs\".\r\n* Fix a bug in CreateColumnFamilyWithImport() where if multiple CFs are imported, we were not resetting files' epoch number and L0 files can have overlapping key range but the same epoch number.\r\n* Fixed race conditions when `ColumnFamilyOptions::inplace_update_support == true` between user overwrites and reads on the same key.\r\n* Fix a bug where `CompactFiles()` can compact files of range conflict with other ongoing compactions' when `preclude_last_level_data_seconds > 0` is used\r\n* Fixed a false positive `Status::Corruption` reported when reopening a DB that used `DBOptions::recycle_log_file_num > 0` and `DBOptions::wal_compression != kNoCompression`.\r\n* While WAL is locked with LockWAL(), some operations like Flush() and IngestExternalFile() are now blocked as they should have been.\r\n* Fixed a bug causing stale memory access when using the TieredSecondaryCache with an NVM secondary cache, and a file system that supports return an FS allocated buffer for MultiRead (FSSupportedOps::kFSBuffer is set).","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/163059580/reactions","total_count":5,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":5,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/157175383","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/157175383/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/157175383/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.2.1","id":157175383,"author":{"login":"anand1976","id":33647610,"node_id":"MDQ6VXNlcjMzNjQ3NjEw","avatar_url":"https://avatars.githubusercontent.com/u/33647610?v=4","gravatar_id":"","url":"https://api.github.com/users/anand1976","html_url":"https://github.com/anand1976","followers_url":"https://api.github.com/users/anand1976/followers","following_url":"https://api.github.com/users/anand1976/following{/other_user}","gists_url":"https://api.github.com/users/anand1976/gists{/gist_id}","starred_url":"https://api.github.com/users/anand1976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anand1976/subscriptions","organizations_url":"https://api.github.com/users/anand1976/orgs","repos_url":"https://api.github.com/users/anand1976/repos","events_url":"https://api.github.com/users/anand1976/events{/privacy}","received_events_url":"https://api.github.com/users/anand1976/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JXk5X","tag_name":"v9.2.1","target_commitish":"9.2.fb","name":"RocksDB 9.2.1","draft":false,"prerelease":false,"created_at":"2024-05-08T23:03:15Z","published_at":"2024-05-23T17:14:58Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.2.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.2.1","body":"## 9.2.1 (2024-05-03)\r\n### Public API Changes\r\n* Add a kAdmPolicyAllowAll option to TieredAdmissionPolicy that admits all blocks evicted from the primary block cache into the compressed secondary cache.\r\n\r\n## 9.2.0 (2024-05-01)\r\n### New Features\r\n* Added two options `deadline` and `max_size_bytes` for CacheDumper to exit early\r\n* Added a new API `GetEntityFromBatchAndDB` to `WriteBatchWithIndex` that can be used for wide-column point lookups with read-your-own-writes consistency. Similarly to `GetFromBatchAndDB`, the API can combine data from the write batch with data from the underlying database if needed. See the API comments for more details.\r\n* [Experimental] Introduce two new cross-column-family iterators - CoalescingIterator and AttributeGroupIterator. The CoalescingIterator enables users to iterate over multiple column families and access their values and columns. During this iteration, if the same key exists in more than one column family, the keys in the later column family will overshadow the previous ones. The AttributeGroupIterator allows users to gather wide columns per Column Family and create attribute groups while iterating over keys across all CFs.\r\n* Added a new API `MultiGetEntityFromBatchAndDB` to `WriteBatchWithIndex` that can be used for batched wide-column point lookups with read-your-own-writes consistency. Similarly to `MultiGetFromBatchAndDB`, the API can combine data from the write batch with data from the underlying database if needed. See the API comments for more details.\r\n* *Adds a `SstFileReader::NewTableIterator` API to support programmatically read a SST file as a raw table file.\r\n* Add an option to `WaitForCompactOptions` - `wait_for_purge` to make `WaitForCompact()` API wait for background purge to complete\r\n\r\n### Public API Changes\r\n* DeleteRange() will return NotSupported() if row_cache is configured since they don't work together in some cases.\r\n* Deprecated `CompactionOptions::compression` since `CompactionOptions`'s API for configuring compression was incomplete, unsafe, and likely unnecessary\r\n* Using `OptionChangeMigration()` to migrate from non-FIFO to FIFO compaction\r\nwith `Options::compaction_options_fifo.max_table_files_size` > 0 can cause\r\nthe whole DB to be dropped right after migration if the migrated data is larger than\r\n`max_table_files_size`\r\n\r\n### Behavior Changes\r\n* Enabling `BlockBasedTableOptions::block_align` is now incompatible (i.e., APIs will return `Status::InvalidArgument`) with more ways of enabling compression: `CompactionOptions::compression`, `ColumnFamilyOptions::compression_per_level`, and `ColumnFamilyOptions::bottommost_compression`.\r\n* Changed the default value of `CompactionOptions::compression` to `kDisableCompressionOption`, which means the compression type is determined by the `ColumnFamilyOptions`.\r\n* `BlockBasedTableOptions::optimize_filters_for_memory` is now set to true by default. When `partition_filters=false`, this could lead to somewhat increased average RSS memory usage by the block cache, but this \"extra\" usage is within the allowed memory budget and should make memory usage more consistent (by minimizing internal fragmentation for more kinds of blocks).\r\n* Dump all keys for cache dumper impl if `SetDumpFilter()` is not called\r\n* `CompactRange()` with `CompactRangeOptions::change_level = true` and `CompactRangeOptions::target_level = 0` that ends up moving more than 1 file from non-L0 to L0 will return `Status::Aborted()`.\r\n* On distributed file systems that support file system level checksum verification and reconstruction reads, RocksDB will now retry a file read if the initial read fails RocksDB block level or record level checksum verification. This applies to MANIFEST file reads when the DB is opened, and to SST file reads at all times.\r\n\r\n### Bug Fixes\r\n* Fix a bug causing `VerifyFileChecksums()` to return false-positive corruption under `BlockBasedTableOptions::block_align=true`\r\n* Provide consistent view of the database across the column families for `NewIterators()` API.\r\n* Fixed feature interaction bug for `DeleteRange()` together with `ColumnFamilyOptions::memtable_insert_with_hint_prefix_extractor`. The impact of this bug would likely be corruption or crashing.\r\n* Fixed hang in `DisableManualCompactions()` where compactions waiting to be scheduled due to conflicts would not be canceled promptly\r\n* Fixed a regression when `ColumnFamilyOptions::max_successive_merges > 0` where the CPU overhead for deciding whether to merge could have increased unless the user had set the option `ColumnFamilyOptions::strict_max_successive_merges`\r\n* Fixed a bug in `MultiGet()` and `MultiGetEntity()` together with blob files (`ColumnFamilyOptions::enable_blob_files == true`). An error looking up one of the keys could cause the results to be wrong for other keys for which the statuses were `Status::OK`.\r\n* Fixed a bug where wrong padded bytes are used to generate file checksum and `DataVerificationInfo::checksum` upon file creation\r\n* Correctly implemented the move semantics of `PinnableWideColumns`.\r\n* Fixed a bug when the recycle_log_file_num in DBOptions is changed from 0 to non-zero when a DB is reopened. On a subsequent reopen, if a log file created when recycle_log_file_num==0 was reused previously, is alive and is empty, we could end up inserting stale WAL records into the memtable.\r\n* *Fix a bug where obsolete files' deletion during DB::Open are not rate limited with `SstFilemManager`'s slow deletion feature even if it's configured.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/157175383/reactions","total_count":6,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":5,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/152271174","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/152271174/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/152271174/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.1.1","id":152271174,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JE3lG","tag_name":"v9.1.1","target_commitish":"9.1.fb","name":"RocksDB 9.1.1","draft":false,"prerelease":false,"created_at":"2024-04-22T18:35:44Z","published_at":"2024-04-22T18:36:27Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.1.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.1.1","body":"## 9.1.1 (2024-04-17)\r\n### Bug Fixes\r\n* Fixed Java `SstFileMetaData` to prevent throwing `java.lang.NoSuchMethodError`\r\n* Fixed a regression when `ColumnFamilyOptions::max_successive_merges > 0` where the CPU overhead for deciding whether to merge could have increased unless the user had set the option `ColumnFamilyOptions::strict_max_successive_merges`"},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151805611","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/151805611/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/151805611/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.1.0","id":151805611,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JDF6r","tag_name":"v9.1.0","target_commitish":"main","name":"RocksDB 9.1.0","draft":false,"prerelease":false,"created_at":"2024-04-18T18:45:47Z","published_at":"2024-04-18T18:47:06Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.1.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.1.0","body":"## 9.1.0 (2024-03-22)\r\n### New Features\r\n* Added an option, `GetMergeOperandsOptions::continue_cb`, to give users the ability to end `GetMergeOperands()`'s lookup process before all merge operands were found.\r\n* *Add sanity checks for ingesting external files that currently checks if the user key comparator used to create the file is compatible with the column family's user key comparator.\r\n*Support ingesting external files for column family that has user-defined timestamps in memtable only enabled.\r\n* On file systems that support storage level data checksum and reconstruction, retry SST block reads for point lookups, scans, and flush and compaction if there's a checksum mismatch on the initial read.\r\n* Some enhancements and fixes to experimental Temperature handling features, including new `default_write_temperature` CF option and opening an `SstFileWriter` with a temperature.\r\n* `WriteBatchWithIndex` now supports wide-column point lookups via the `GetEntityFromBatch` API. See the API comments for more details.\r\n* *Implement experimental features: API `Iterator::GetProperty(\"rocksdb.iterator.write-time\")` to allow users to get data's approximate write unix time and write data with a specific write time via `WriteBatch::TimedPut` API.\r\n\r\n### Public API Changes\r\n* Best-effort recovery (`best_efforts_recovery == true`) may now be used together with atomic flush (`atomic_flush == true`). The all-or-nothing recovery guarantee for atomically flushed data will be upheld.\r\n* Remove deprecated option `bottommost_temperature`, already replaced by `last_level_temperature`\r\n* Added new PerfContext counters for block cache bytes read - block_cache_index_read_byte, block_cache_filter_read_byte, block_cache_compression_dict_read_byte, and block_cache_read_byte.\r\n* Deprecate experimental Remote Compaction APIs - StartV2() and WaitForCompleteV2() and introduce Schedule() and Wait(). The new APIs essentially does the same thing as the old APIs. They allow taking externally generated unique id to wait for remote compaction to complete.\r\n* *For API `WriteCommittedTransaction::GetForUpdate`, if the column family enables user-defined timestamp, it was mandated that argument `do_validate` cannot be false, and UDT based validation has to be done with a user set read timestamp. It's updated to make the UDT based validation optional if user sets `do_validate` to false and does not set a read timestamp. With this, `GetForUpdate` skips UDT based validation and it's users' responsibility to enforce the UDT invariant. SO DO NOT skip this UDT-based validation if users do not have ways to enforce the UDT invariant. Ways to enforce the invariant on the users side include manage a monotonically increasing timestamp, commit transactions in a single thread etc.\r\n* Defined a new PerfLevel `kEnableWait` to measure time spent by user threads blocked in RocksDB other than mutex, such as a write thread waiting to be added to a write group, a write thread delayed or stalled etc.\r\n* `RateLimiter`'s API no longer requires the burst size to be the refill size. Users of `NewGenericRateLimiter()` can now provide burst size in `single_burst_bytes`. Implementors of `RateLimiter::SetSingleBurstBytes()` need to adapt their implementations to match the changed API doc.\r\n* Add `write_memtable_time` to the newly introduced PerfLevel `kEnableWait`.\r\n\r\n### Behavior Changes\r\n* `RateLimiter`s created by `NewGenericRateLimiter()` no longer modify the refill period when `SetSingleBurstBytes()` is called.\r\n* Merge writes will only keep merge operand count within `ColumnFamilyOptions::max_successive_merges` when the key's merge operands are all found in memory, unless `strict_max_successive_merges` is explicitly set.\r\n\r\n### Bug Fixes\r\n* Fixed `kBlockCacheTier` reads to return `Status::Incomplete` when I/O is needed to fetch a merge chain's base value from a blob file.\r\n* Fixed `kBlockCacheTier` reads to return `Status::Incomplete` on table cache miss rather than incorrectly returning an empty value.\r\n* Fixed a data race in WalManager that may affect how frequent PurgeObsoleteWALFiles() runs.\r\n* Re-enable the recycle_log_file_num option in DBOptions for kPointInTimeRecovery WAL recovery mode, which was previously disabled due to a bug in the recovery logic. This option is incompatible with WriteOptions::disableWAL. A Status::InvalidArgument() will be returned if disableWAL is specified.\r\n\r\n### Performance Improvements\r\n* Java API `multiGet()` variants now take advantage of the underlying batched `multiGet()` performance improvements.\r\nBefore\r\n```\r\nBenchmark (columnFamilyTestType) (keyCount) (keySize) (multiGetSize) (valueSize) Mode Cnt Score Error Units\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 64 thrpt 25 6315.541 ± 8.106 ops/s\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 1024 thrpt 25 6975.468 ± 68.964 ops/s\r\n```\r\nAfter\r\n```\r\nBenchmark (columnFamilyTestType) (keyCount) (keySize) (multiGetSize) (valueSize) Mode Cnt Score Error Units\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 64 thrpt 25 7046.739 ± 13.299 ops/s\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 1024 thrpt 25 7654.521 ± 60.121 ops/s\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151805611/reactions","total_count":7,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":3,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151633981","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/151633981/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/151633981/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.0.1","id":151633981,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JCcA9","tag_name":"v9.0.1","target_commitish":"9.0.fb","name":"RocksDB 9.0.1","draft":false,"prerelease":false,"created_at":"2024-04-17T20:46:25Z","published_at":"2024-04-17T20:51:13Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.0.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.0.1","body":"## 9.0.1 (2024-04-11)\r\n### Bug Fixes\r\n* Fixed CMake Javadoc and source jar builds\r\n* Fixed Java `SstFileMetaData` to prevent throwing `java.lang.NoSuchMethodError`","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151633981/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":2,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/150462309","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/150462309/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/150462309/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.11.4","id":150462309,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84I999l","tag_name":"v8.11.4","target_commitish":"8.11.fb","name":"RocksDB 8.11.4","draft":false,"prerelease":false,"created_at":"2024-04-09T19:40:06Z","published_at":"2024-04-09T19:44:45Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.11.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.11.4","body":"## 8.11.4 (2024-04-09)\r\n### Bug Fixes\r\n* Fixed CMake Javadoc build\r\n* Fixed Java `SstFileMetaData` to prevent throwing `java.lang.NoSuchMethodError`"},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/147279474","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/147279474/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/147279474/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.0.0","id":147279474,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Ix05y","tag_name":"v9.0.0","target_commitish":"main","name":"RocksDB 9.0.0","draft":false,"prerelease":false,"created_at":"2024-03-19T16:43:17Z","published_at":"2024-03-19T16:44:47Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.0.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.0.0","body":"## 9.0.0 (2024-02-16)\r\n### New Features\r\n* Provide support for FSBuffer for point lookups. Also added support for scans and compactions that don't go through prefetching.\r\n* *Make `SstFileWriter` create SST files without persisting user defined timestamps when the `Option.persist_user_defined_timestamps` flag is set to false.\r\n* Add support for user-defined timestamps in APIs `DeleteFilesInRanges` and `GetPropertiesOfTablesInRange`.\r\n* Mark wal\\_compression feature as production-ready. Currently only compatible with ZSTD compression.\r\n\r\n### Public API Changes\r\n* Allow setting Stderr logger via C API\r\n* Declare one Get and one MultiGet variant as pure virtual, and make all the other variants non-overridable. The methods required to be implemented by derived classes of DB allow returning timestamps. It is up to the implementation to check and return an error if timestamps are not supported. The non-batched MultiGet APIs are reimplemented in terms of batched MultiGet, so callers might see a performance improvement.\r\n* Exposed mode option to Rate Limiter via c api.\r\n* Removed deprecated option `access_hint_on_compaction_start`\r\n* Removed deprecated option `ColumnFamilyOptions::check_flush_compaction_key_order`\r\n* *Remove the default `WritableFile::GetFileSize` and `FSWritableFile::GetFileSize` implementation that returns 0 and make it pure virtual, so that subclasses are enforced to explicitly provide an implementation.\r\n* Removed deprecated option `ColumnFamilyOptions::level_compaction_dynamic_file_size`\r\n* *Removed tickers with typos \"rocksdb.error.handler.bg.errro.count\", \"rocksdb.error.handler.bg.io.errro.count\", \"rocksdb.error.handler.bg.retryable.io.errro.count\".\r\n* Remove the force mode for `EnableFileDeletions` API because it is unsafe with no known legitimate use.\r\n* Removed deprecated option `ColumnFamilyOptions::ignore_max_compaction_bytes_for_input`\r\n* `sst_dump --command=check` now compares the number of records in a table with `num_entries` in table property, and reports corruption if there is a mismatch. API `SstFileDumper::ReadSequential()` is updated to optionally do this verification. (#12322)\r\n\r\n### Behavior Changes\r\n* format\\_version=6 is the new default setting in BlockBasedTableOptions, for more robust data integrity checking. DBs and SST files written with this setting cannot be read by RocksDB versions before 8.6.0.\r\n* Compactions can be scheduled in parallel in an additional scenario: multiple files are marked for compaction within a single column family\r\n* For leveled compaction, RocksDB will try to do intra-L0 compaction if the total L0 size is small compared to Lbase (#12214). Users with atomic_flush=true are more likely to see the impact of this change.\r\n\r\n### Bug Fixes\r\n* Fixed a data race in `DBImpl::RenameTempFileToOptionsFile`.\r\n* Fix some perf context statistics error in write steps. which include missing write_memtable_time in unordered_write. missing write_memtable_time in PipelineWrite when Writer stat is STATE_PARALLEL_MEMTABLE_WRITER. missing write_delay_time when calling DelayWrite in WriteImplWALOnly function.\r\n* Fixed a bug that can, under rare circumstances, cause MultiGet to return an incorrect result for a duplicate key in a MultiGet batch.\r\n* Fix a bug where older data of an ingested key can be returned for read when universal compaction is used","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/147279474/reactions","total_count":18,"+1":11,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":0,"rocket":2,"eyes":1}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/143908923","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/143908923/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/143908923/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.11.3","id":143908923,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Ik-A7","tag_name":"v8.11.3","target_commitish":"main","name":"RocksDB 8.11.3","draft":false,"prerelease":false,"created_at":"2024-02-28T01:48:37Z","published_at":"2024-02-28T01:51:42Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.11.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.11.3","body":"## 8.11.3 (2024-02-27)\r\n* Correct CMake Javadoc and source jar builds\r\n\r\n## 8.11.2 (2024-02-16)\r\n* Update zlib to 1.3.1 for Java builds\r\n\r\n## 8.11.1 (2024-01-25)\r\n### Bug Fixes\r\n* Fix a bug where older data of an ingested key can be returned for read when universal compaction is used\r\n* Apply appropriate rate limiting and priorities in more places.\r\n\r\n## 8.11.0 (2024-01-19)\r\n### New Features\r\n* Add new statistics: `rocksdb.sst.write.micros` measures time of each write to SST file; `rocksdb.file.write.{flush|compaction|db.open}.micros` measure time of each write to SST table (currently only block-based table format) and blob file for flush, compaction and db open.\r\n\r\n### Public API Changes\r\n* Added another enumerator `kVerify` to enum class `FileOperationType` in listener.h. Update your `switch` statements as needed.\r\n* Add CompressionOptions to the CompressedSecondaryCacheOptions structure to allow users to specify library specific options when creating the compressed secondary cache.\r\n* Deprecated several options: `level_compaction_dynamic_file_size`, `ignore_max_compaction_bytes_for_input`, `check_flush_compaction_key_order`, `flush_verify_memtable_count`, `compaction_verify_record_count`, `fail_if_options_file_error`, and `enforce_single_del_contracts`\r\n* Exposed options ttl via c api.\r\n\r\n### Behavior Changes\r\n* `rocksdb.blobdb.blob.file.write.micros` expands to also measure time writing the header and footer. Therefore the COUNT may be higher and values may be smaller than before. For stacked BlobDB, it no longer measures the time of explictly flushing blob file.\r\n* Files will be compacted to the next level if the data age exceeds periodic_compaction_seconds except for the last level.\r\n* Reduced the compaction debt ratio trigger for scheduling parallel compactions\r\n* For leveled compaction with default compaction pri (kMinOverlappingRatio), files marked for compaction will be prioritized over files not marked when picking a file from a level for compaction.\r\n\r\n### Bug Fixes\r\n* Fix bug in auto_readahead_size that combined with IndexType::kBinarySearchWithFirstKey + fails or iterator lands at a wrong key\r\n* Fixed some cases in which DB file corruption was detected but ignored on creating a backup with BackupEngine.\r\n* Fix bugs where `rocksdb.blobdb.blob.file.synced` includes blob files failed to get synced and `rocksdb.blobdb.blob.file.bytes.written` includes blob bytes failed to get written.\r\n* Fixed a possible memory leak or crash on a failure (such as I/O error) in automatic atomic flush of multiple column families.\r\n* Fixed some cases of in-memory data corruption using mmap reads with `BackupEngine`, `sst_dump`, or `ldb`.\r\n* Fixed issues with experimental `preclude_last_level_data_seconds` option that could interfere with expected data tiering.\r\n* Fixed the handling of the edge case when all existing blob files become unreferenced. Such files are now correctly deleted.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/143908923/reactions","total_count":18,"+1":7,"-1":0,"laugh":0,"hooray":5,"confused":0,"heart":6,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/142874963","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/142874963/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/142874963/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.10.2","id":142874963,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84IhBlT","tag_name":"v8.10.2","target_commitish":"main","name":"RocksDB 8.10.2","draft":false,"prerelease":false,"created_at":"2024-02-20T23:12:16Z","published_at":"2024-02-20T23:14:30Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.10.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.10.2","body":"## 8.10.2 (2024-02-16)\r\n* Update zlib to 1.3.1 for Java builds\r\n\r\n## 8.10.1 (2024-01-16)\r\n### Bug Fixes\r\n* Fix bug in auto_readahead_size that combined with IndexType::kBinarySearchWithFirstKey + fails or iterator lands at a wrong key","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/142874963/reactions","total_count":6,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":3,"eyes":3}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/136548247","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/136548247/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/136548247/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.10.0","id":136548247,"author":{"login":"ltamasi","id":47607618,"node_id":"MDQ6VXNlcjQ3NjA3NjE4","avatar_url":"https://avatars.githubusercontent.com/u/47607618?v=4","gravatar_id":"","url":"https://api.github.com/users/ltamasi","html_url":"https://github.com/ltamasi","followers_url":"https://api.github.com/users/ltamasi/followers","following_url":"https://api.github.com/users/ltamasi/following{/other_user}","gists_url":"https://api.github.com/users/ltamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ltamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ltamasi/subscriptions","organizations_url":"https://api.github.com/users/ltamasi/orgs","repos_url":"https://api.github.com/users/ltamasi/repos","events_url":"https://api.github.com/users/ltamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ltamasi/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84II4-X","tag_name":"v8.10.0","target_commitish":"main","name":"RocksDB 8.10.0","draft":false,"prerelease":false,"created_at":"2024-01-10T19:44:11Z","published_at":"2024-01-10T19:52:20Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.10.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.10.0","body":"## 8.10.0 (2023-12-15)\r\n### New Features\r\n* Provide support for async_io to trim readahead_size by doing block cache lookup\r\n* Added initial wide-column support in `WriteBatchWithIndex`. This includes the `PutEntity` API and support for wide columns in the existing read APIs (`GetFromBatch`, `GetFromBatchAndDB`, `MultiGetFromBatchAndDB`, and `BaseDeltaIterator`).\r\n\r\n### Public API Changes\r\n* Custom implementations of `TablePropertiesCollectorFactory` may now return a `nullptr` collector to decline processing a file, reducing callback overheads in such cases.\r\n\r\n### Behavior Changes\r\n* Make ReadOptions.auto_readahead_size default true which does prefetching optimizations for forward scans if iterate_upper_bound and block_cache is also specified.\r\n* Compactions can be scheduled in parallel in an additional scenario: high compaction debt relative to the data size\r\n* HyperClockCache now has built-in protection against excessive CPU consumption under the extreme stress condition of no (or very few) evictable cache entries, which can slightly increase memory usage such conditions. New option `HyperClockCacheOptions::eviction_effort_cap` controls the space-time trade-off of the response. The default should be generally well-balanced, with no measurable affect on normal operation.\r\n\r\n### Bug Fixes\r\n* Fix a corner case with auto_readahead_size where Prev Operation returns NOT SUPPORTED error when scans direction is changed from forward to backward.\r\n* Avoid destroying the periodic task scheduler's default timer in order to prevent static destruction order issues.\r\n* Fix double counting of BYTES_WRITTEN ticker when doing writes with transactions.\r\n* Fix a WRITE_STALL counter that was reporting wrong value in few cases.\r\n* A lookup by MultiGet in a TieredCache that goes to the local flash cache and finishes with very low latency, i.e before the subsequent call to WaitAll, is ignored, resulting in a false negative and a memory leak.\r\n\r\n### Performance Improvements\r\n* Java API extensions to improve consistency and completeness of APIs\r\n  - Extended `RocksDB.get([ColumnFamilyHandle columnFamilyHandle,] ReadOptions opt, ByteBuffer key, ByteBuffer value)` which now accepts indirect buffer parameters as well as direct buffer parameters\r\n  - Extended `RocksDB.put( [ColumnFamilyHandle columnFamilyHandle,] WriteOptions writeOpts, final ByteBuffer key, final ByteBuffer value)` which now accepts indirect buffer parameters as well as direct buffer parameters\r\n  - Added `RocksDB.merge([ColumnFamilyHandle columnFamilyHandle,] WriteOptions writeOptions, ByteBuffer key, ByteBuffer value)` methods with the same parameter options as `put(...)` - direct and indirect buffers are supported\r\n  - Added `RocksIterator.key( byte[] key [, int offset, int len])` methods which retrieve the iterator key into the supplied buffer\r\n  - Added `RocksIterator.value( byte[] value [, int offset, int len])` methods which retrieve the iterator value into the supplied buffer\r\n  - Deprecated `get(final ColumnFamilyHandle columnFamilyHandle, final ReadOptions readOptions, byte[])` in favour of `get(final ReadOptions readOptions, final ColumnFamilyHandle columnFamilyHandle, byte[])` which has consistent parameter ordering with other methods in the same class\r\n  - Added `Transaction.get( ReadOptions opt, [ColumnFamilyHandle columnFamilyHandle, ] byte[] key, byte[] value)` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.get( ReadOptions opt, [ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value)` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.getForUpdate( ReadOptions readOptions, [ColumnFamilyHandle columnFamilyHandle, ] byte[] key, byte[] value, boolean exclusive [, boolean doValidate])` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.getForUpdate( ReadOptions readOptions, [ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value, boolean exclusive [, boolean doValidate])` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.getIterator()` method as a convenience which defaults the `ReadOptions` value supplied to existing `Transaction.iterator()` methods. This mirrors the existing `RocksDB.iterator()` method.\r\n  - Added `Transaction.put([ColumnFamilyHandle columnFamilyHandle, ]  ByteBuffer key, ByteBuffer value [, boolean assumeTracked])` methods which supply the key, and the value to be written in a `ByteBuffer` parameter\r\n  - Added `Transaction.merge([ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value [,  boolean assumeTracked])` methods which supply the key, and the value to be written/merged in a `ByteBuffer` parameter\r\n  - Added `Transaction.mergeUntracked([ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value)` methods which supply the key, and the value to be written/merged in a `ByteBuffer` parameter\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/136548247/reactions","total_count":8,"+1":8,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/133486188","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/133486188/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/133486188/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.9.1","id":133486188,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84H9NZs","tag_name":"v8.9.1","target_commitish":"main","name":"RocksDB 8.9.1","draft":false,"prerelease":false,"created_at":"2023-12-11T22:09:55Z","published_at":"2023-12-11T22:14:12Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.9.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.9.1","body":"## 8.9.1 (2023-12-08)\r\n### Bug Fixes\r\n* Avoid destroying the periodic task scheduler's default timer in order to prevent static destruction order issues.\r\n\r\n## 8.9.0 (2023-11-17)\r\n### New Features\r\n* Add GetEntity() and PutEntity() API implementation for Attribute Group support. Through the use of Column Families, AttributeGroup enables users to logically group wide-column entities.\r\n\r\n### Public API Changes\r\n* Added rocksdb_ratelimiter_create_auto_tuned API to create an auto-tuned GenericRateLimiter.\r\n* Added clipColumnFamily() to the Java API to clip the entries in the CF according to the range [begin_key, end_key).\r\n* Make the `EnableFileDeletion` API not default to force enabling. For users that rely on this default behavior and still\r\nwant to continue to use force enabling, they need to explicitly pass a `true` to `EnableFileDeletion`.\r\n* Add new Cache APIs GetSecondaryCacheCapacity() and GetSecondaryCachePinnedUsage() to return the configured capacity, and cache reservation charged to the secondary cache.\r\n\r\n### Behavior Changes\r\n* During off-peak hours defined by `daily_offpeak_time_utc`, the compaction picker will select a larger number of files for periodic compaction. This selection will include files that are projected to expire by the next off-peak start time, ensuring that these files are not chosen for periodic compaction outside of off-peak hours.\r\n* If an error occurs when writing to a trace file after `DB::StartTrace()`, the subsequent trace writes are skipped to avoid writing to a file that has previously seen error. In this case, `DB::EndTrace()` will also return a non-ok status with info about the error occured previously in its status message.\r\n* Deleting stale files upon recovery are delegated to SstFileManger if available so they can be rate limited.\r\n* Make RocksDB only call `TablePropertiesCollector::Finish()` once.\r\n* When `WAL_ttl_seconds > 0`, we now process archived WALs for deletion at least every `WAL_ttl_seconds / 2` seconds. Previously it could be less frequent in case of small `WAL_ttl_seconds` values when size-based expiration (`WAL_size_limit_MB > 0 `) was simultaneously enabled.\r\n\r\n### Bug Fixes\r\n* Fixed a crash or assertion failure bug in experimental new HyperClockCache variant, especially when running with a SecondaryCache.\r\n* Fix a race between flush error recovery and db destruction that can lead to db crashing.\r\n* Fixed some bugs in the index builder/reader path for user-defined timestamps in Memtable only feature.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/133486188/reactions","total_count":11,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":0,"rocket":4,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/131039583","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/131039583/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/131039583/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.8.1","id":131039583,"author":{"login":"hx235","id":83968999,"node_id":"MDQ6VXNlcjgzOTY4OTk5","avatar_url":"https://avatars.githubusercontent.com/u/83968999?v=4","gravatar_id":"","url":"https://api.github.com/users/hx235","html_url":"https://github.com/hx235","followers_url":"https://api.github.com/users/hx235/followers","following_url":"https://api.github.com/users/hx235/following{/other_user}","gists_url":"https://api.github.com/users/hx235/gists{/gist_id}","starred_url":"https://api.github.com/users/hx235/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hx235/subscriptions","organizations_url":"https://api.github.com/users/hx235/orgs","repos_url":"https://api.github.com/users/hx235/repos","events_url":"https://api.github.com/users/hx235/events{/privacy}","received_events_url":"https://api.github.com/users/hx235/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Hz4Ff","tag_name":"v8.8.1","target_commitish":"main","name":"RocksDB 8.8.1","draft":false,"prerelease":false,"created_at":"2023-11-22T17:57:31Z","published_at":"2023-11-22T18:00:46Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.8.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.8.1","body":"## 8.8.1 (2023-11-17)\r\n### Bug fixes\r\n* Make the cache memory reservation accounting in Tiered cache (primary and compressed secondary cache) more accurate to avoid over/under charging the secondary cache.\r\n* Allow increasing the compressed_secondary_ratio in the Tiered cache after setting it to 0 to disable.\r\n\r\n## 8.8.0 (2023-10-23)\r\n### New Features\r\n* Introduce AttributeGroup by adding the first AttributeGroup support API, MultiGetEntity(). Through the use of Column Families, AttributeGroup enables users to logically group wide-column entities. More APIs to support AttributeGroup will come soon, including GetEntity, PutEntity, and others.\r\n* Added new tickers `rocksdb.fifo.{max.size|ttl}.compactions` to count FIFO compactions that drop files for different reasons\r\n* Add an experimental offpeak duration awareness by setting `DBOptions::daily_offpeak_time_utc` in \"HH:mm-HH:mm\" format. This information will be used for resource optimization in the future\r\n* Users can now change the max bytes granted in a single refill period (i.e, burst) during runtime by `SetSingleBurstBytes()` for RocksDB rate limiter\r\n\r\n### Public API Changes\r\n* The default value of `DBOptions::fail_if_options_file_error` changed from `false` to `true`. Operations that set in-memory options (e.g., `DB::Open*()`, `DB::SetOptions()`, `DB::CreateColumnFamily*()`, and `DB::DropColumnFamily()`) but fail to persist the change will now return a non-OK `Status` by default.\r\n* Add new Cache APIs GetSecondaryCacheCapacity() and GetSecondaryCachePinnedUsage() to return the configured capacity, and cache reservation charged to the secondary cache.\r\n\r\n### Behavior Changes\r\n* For non direct IO, eliminate the file system prefetching attempt for compaction read when `Options::compaction_readahead_size` is 0\r\n* During a write stop, writes now block on in-progress recovery attempts\r\n* Deleting stale files upon recovery are delegated to SstFileManger if available so they can be rate limited.\r\n\r\n### Bug Fixes\r\n* Fix a bug in auto_readahead_size where first_internal_key of index blocks wasn't copied properly resulting in corruption error when first_internal_key was used for comparison.\r\n* Fixed a bug where compaction read under non direct IO still falls back to RocksDB internal prefetching after file system's prefetching returns non-OK status other than `Status::NotSupported()`\r\n* Add bounds check in WBWIIteratorImpl and make BaseDeltaIterator, WriteUnpreparedTxn and WritePreparedTxn respect the upper bound and lower bound in ReadOption. See 11680.\r\n* Fixed the handling of wide-column base values in the `max_successive_merges` logic.\r\n* Fixed a rare race bug involving a concurrent combination of Create/DropColumnFamily and/or Set(DB)Options that could lead to inconsistency between (a) the DB's reported options state, (b) the DB options in effect, and (c) the latest persisted OPTIONS file.\r\n* Fixed a possible underflow when computing the compressed secondary cache share of memory reservations while updating the compressed secondary to total block cache ratio.\r\n\r\n### Performance Improvements\r\n* Improved the I/O efficiency of DB::Open a new DB with `create_missing_column_families=true` and many column families.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/131039583/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/130464727","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/130464727/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/130464727/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.7.3","id":130464727,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HxrvX","tag_name":"v8.7.3","target_commitish":"8.7.fb","name":"RocksDB 8.7.3","draft":false,"prerelease":false,"created_at":"2023-10-31T20:22:47Z","published_at":"2023-11-20T17:28:00Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.7.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.7.3","body":"## 8.7.3 (2023-10-30)\r\n### Behavior Changes\r\n* Deleting stale files upon recovery are delegated to SstFileManger if available so they can be rate limited.\r\n\r\n## 8.7.2 (2023-10-25)\r\n### Public API Changes\r\n* Add new Cache APIs GetSecondaryCacheCapacity() and GetSecondaryCachePinnedUsage() to return the configured capacity, and cache reservation charged to the secondary cache.\r\n\r\n### Bug Fixes\r\n* Fixed a possible underflow when computing the compressed secondary cache share of memory reservations while updating the compressed secondary to total block cache ratio.\r\n* Fix an assertion failure when UpdeteTieredCache() is called in an idempotent manner.\r\n\r\n## 8.7.1 (2023-10-20)\r\n### Bug Fixes\r\n* Fix a bug in auto_readahead_size where first_internal_key of index blocks wasn't copied properly resulting in corruption error when first_internal_key was used for comparison.\r\n* Add bounds check in WBWIIteratorImpl and make BaseDeltaIterator, WriteUnpreparedTxn and WritePreparedTxn respect the upper bound and lower bound in ReadOption. See 11680.\r\n\r\n## 8.7.0 (2023-09-22)\r\n### New Features\r\n* Added an experimental new \"automatic\" variant of HyperClockCache that does not require a prior estimate of the average size of cache entries. This variant is activated when HyperClockCacheOptions::estimated\\_entry\\_charge = 0 and has essentially the same concurrency benefits as the existing HyperClockCache.\r\n* Add a new statistic `COMPACTION_CPU_TOTAL_TIME` that records cumulative compaction cpu time. This ticker is updated regularly while a compaction is running.\r\n* Add `GetEntity()` API for ReadOnly DB and Secondary DB.\r\n* Add a new iterator API `Iterator::Refresh(const Snapshot *)` that allows iterator to be refreshed while using the input snapshot to read.\r\n* Added a new read option `merge_operand_count_threshold`. When the number of merge operands applied during a successful point lookup exceeds this threshold, the query will return a special OK status with a new subcode `kMergeOperandThresholdExceeded`. Applications might use this signal to take action to reduce the number of merge operands for the affected key(s), for example by running a compaction.\r\n* For `NewRibbonFilterPolicy()`, made the `bloom_before_level` option mutable through the Configurable interface and the SetOptions API, allowing dynamic switching between all-Bloom and all-Ribbon configurations, and configurations in between. See comments on `NewRibbonFilterPolicy()`\r\n* RocksDB now allows the block cache to be stacked on top of a compressed secondary cache and a non-volatile secondary cache, thus creating a three-tier cache. To set it up, use the `NewTieredCache()` API in rocksdb/cache.h..\r\n* Added a new wide-column aware full merge API called `FullMergeV3` to `MergeOperator`. `FullMergeV3` supports wide columns both as base value and merge result, which enables the application to perform more general transformations during merges. For backward compatibility, the default implementation implements the earlier logic of applying the merge operation to the default column of any wide-column entities. Specifically, if there is no base value or the base value is a plain key-value, the default implementation falls back to `FullMergeV2`. If the base value is a wide-column entity, the default implementation invokes `FullMergeV2` to perform the merge on the default column, and leaves any other columns unchanged.\r\n* Add wide column support to ldb commands (scan, dump, idump, dump_wal) and sst_dump tool's scan command\r\n\r\n### Public API Changes\r\n* Expose more information about input files used in table creation (if any) in `CompactionFilter::Context`. See `CompactionFilter::Context::input_start_level`,`CompactionFilter::Context::input_table_properties` for more.\r\n* `Options::compaction_readahead_size` 's default value is changed from 0 to 2MB.\r\n* When using LZ4 compression, the `acceleration` parameter is configurable by setting the negated value in `CompressionOptions::level`. For example, `CompressionOptions::level=-10` will set `acceleration=10`\r\n* The `NewTieredCache` API has been changed to take the total cache capacity (inclusive of both the primary and the compressed secondary cache) and the ratio of total capacity to allocate to the compressed cache. These are specified in `TieredCacheOptions`. Any capacity specified in `LRUCacheOptions`, `HyperClockCacheOptions` and `CompressedSecondaryCacheOptions` is ignored. A new API, `UpdateTieredCache` is provided to dynamically update the total capacity, ratio of compressed cache, and admission policy.\r\n* The `NewTieredVolatileCache()` API in rocksdb/cache.h has been renamed to `NewTieredCache()`.\r\n\r\n### Behavior Changes\r\n* Compaction read performance will regress when `Options::compaction_readahead_size` is explicitly set to 0\r\n* Universal size amp compaction will conditionally exclude some of the newest L0 files when selecting input with a small negative impact to size amp. This is to prevent a large number of L0 files from being locked by a size amp compaction, potentially leading to write stop with a few more flushes.\r\n* Change ldb scan command delimiter from ':' to '==>'.\r\n* For non direct IO, eliminate the file system prefetching attempt for compaction read when `Options::compaction_readahead_size` is 0\r\n\r\n### Bug Fixes\r\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\r\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\r\n* Fix a bug with atomic_flush=true that can cause DB to stuck after a flush fails (#11872).\r\n* Fix a bug where RocksDB (with atomic_flush=false) can delete output SST files of pending flushes when a previous concurrent flush fails (#11865). This can result in DB entering read-only state with error message like `IO error: No such file or directory: While open a file for random read: /tmp/rocksdbtest-501/db_flush_test_87732_4230653031040984171/000013.sst`.\r\n* Fix an assertion fault during seek with async_io when readahead trimming is enabled.\r\n* When the compressed secondary cache capacity is reduced to 0, it should be completely disabled. Before this fix, inserts and lookups would still go to the backing `LRUCache` before returning, thus incurring locking overhead. With this fix, inserts and lookups are no-ops and do not add any overhead.\r\n* Updating the tiered cache (cache allocated using NewTieredCache()) by calling SetCapacity() on it was not working properly. The initial creation would set the primary cache capacity to the combined primary and compressed secondary cache capacity. But SetCapacity() would just set the primary cache capacity. With this fix, the user always specifies the total budget and compressed secondary cache ratio on creation. Subsequently, SetCapacity() will distribute the new capacity across the two caches by the same ratio.\r\n* Fixed a bug in `MultiGet` for cleaning up SuperVersion acquired with locking db mutex.\r\n* Fix a bug where row cache can falsely return kNotFound even though row cache entry is hit.\r\n* Fixed a race condition in `GenericRateLimiter` that could cause it to stop granting requests\r\n* Fix a bug (Issue #10257) where DB can hang after write stall since no compaction is scheduled (#11764).\r\n* Add a fix for async_io where during seek, when reading a block for seeking a target key in a file without any readahead, the iterator aligned the read on a page boundary and reading more than necessary. This increased the storage read bandwidth usage.\r\n* Fix an issue in sst dump tool to handle bounds specified for data with user-defined timestamps.\r\n* When auto_readahead_size is enabled, update readahead upper bound during readahead trimming when reseek changes iterate_upper_bound dynamically.\r\n* Fixed a bug where `rocksdb.file.read.verify.file.checksums.micros` is not populated\r\n* Fixed a bug where compaction read under non direct IO still falls back to RocksDB internal prefetching after file system's prefetching returns non-OK status other than `Status::NotSupported()`\r\n\r\n### Performance Improvements\r\n* Added additional improvements in tuning readahead_size during Scans when auto_readahead_size is enabled. However it's not recommended for backward scans and might impact the performance. More details in options.h.\r\n* During async_io, the Seek happens in 2 phases. Phase 1 starts an asynchronous read on a block cache miss, and phase 2 waits for it to complete and finishes the seek. In both phases, it tries to lookup the block cache for the data block first before looking in the prefetch buffer. It's optimized by doing the block cache lookup only in the first phase that would save some CPU.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/130464727/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":3,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/123908572","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/123908572/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/123908572/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.6.7","id":123908572,"author":{"login":"anand1976","id":33647610,"node_id":"MDQ6VXNlcjMzNjQ3NjEw","avatar_url":"https://avatars.githubusercontent.com/u/33647610?v=4","gravatar_id":"","url":"https://api.github.com/users/anand1976","html_url":"https://github.com/anand1976","followers_url":"https://api.github.com/users/anand1976/followers","following_url":"https://api.github.com/users/anand1976/following{/other_user}","gists_url":"https://api.github.com/users/anand1976/gists{/gist_id}","starred_url":"https://api.github.com/users/anand1976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anand1976/subscriptions","organizations_url":"https://api.github.com/users/anand1976/orgs","repos_url":"https://api.github.com/users/anand1976/repos","events_url":"https://api.github.com/users/anand1976/events{/privacy}","received_events_url":"https://api.github.com/users/anand1976/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HYrHc","tag_name":"v8.6.7","target_commitish":"8.6.fb","name":"RocksDB 8.6.7","draft":false,"prerelease":false,"created_at":"2023-09-27T02:26:15Z","published_at":"2023-10-05T17:36:27Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.6.7","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.6.7","body":"## 8.6.7 (2023-09-26)\r\n### Bug Fixes\r\n* Fixed a bug where compaction read under non direct IO still falls back to RocksDB internal prefetching after file system's prefetching returns non-OK status other than `Status::NotSupported()`\r\n\r\n### Behavior Changes\r\n* For non direct IO, eliminate the file system prefetching attempt for compaction read when `Options::compaction_readahead_size` is 0\r\n\r\n## 8.6.6 (2023-09-25)\r\n### Bug Fixes\r\n* Fix a bug with atomic_flush=true that can cause DB to stuck after a flush fails (#11872).\r\n* Fix a bug where RocksDB (with atomic_flush=false) can delete output SST files of pending flushes when a previous concurrent flush fails (#11865). This can result in DB entering read-only state with error message like `IO error: No such file or directory: While open a file for random read: /tmp/rocksdbtest-501/db_flush_test_87732_4230653031040984171/000013.sst`.\r\n* When the compressed secondary cache capacity is reduced to 0, it should be completely disabled. Before this fix, inserts and lookups would still go to the backing `LRUCache` before returning, thus incurring locking overhead. With this fix, inserts and lookups are no-ops and do not add any overhead.\r\n\r\n## 8.6.5 (2023-09-15)\r\n### Bug Fixes\r\n* Fixed a bug where `rocksdb.file.read.verify.file.checksums.micros` is not populated.\r\n\r\n## 8.6.4 (2023-09-13)\r\n### Public API changes\r\n* Add a column family option `default_temperature` that is used for file reading accounting purpose, such as io statistics, for files that don't have an explicitly set temperature.\r\n\r\n## 8.6.3 (2023-09-12)\r\n### Bug Fixes\r\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\r\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\r\n\r\n## 8.6.2 (2023-09-11)\r\n### Bug Fixes\r\n* Add a fix for async_io where during seek, when reading a block for seeking a target key in a file without any readahead, the iterator aligned the read on a page boundary and reading more than necessary. This increased the storage read bandwidth usage.\r\n\r\n## 8.6.1 (2023-08-30)\r\n### Public API Changes\r\n* `Options::compaction_readahead_size` 's default value is changed from 0 to 2MB.\r\n\r\n### Behavior Changes\r\n* Compaction read performance will regress when `Options::compaction_readahead_size` is explicitly set to 0\r\n\r\n## 8.6.0 (2023-08-18)\r\n### New Features\r\n* Added enhanced data integrity checking on SST files with new format_version=6. Performance impact is very small or negligible. Previously if SST data was misplaced or re-arranged by the storage layer, it could pass block checksum with higher than 1 in 4 billion probability. With format_version=6, block checksums depend on what file they are in and location within the file. This way, misplaced SST data is no more likely to pass checksum verification than randomly corrupted data. Also in format_version=6, SST footers are checksum-protected.\r\n* Add a new feature to trim readahead_size during scans upto upper_bound when iterate_upper_bound is specified. It's enabled through ReadOptions.auto_readahead_size. Users must also specify ReadOptions.iterate_upper_bound.\r\n* RocksDB will compare the number of input keys to the number of keys processed after each compaction. Compaction will fail and report Corruption status if the verification fails. Option `compaction_verify_record_count` is introduced for this purpose and is enabled by default.\r\n* Add a CF option `bottommost_file_compaction_delay` to allow specifying the delay of bottommost level single-file compactions.\r\n* Add support to allow enabling / disabling user-defined timestamps feature for an existing column family in combination with the in-Memtable only feature.\r\n* Implement a new admission policy for the compressed secondary cache that admits blocks evicted from the primary cache with the hit bit set. This policy can be specified in TieredVolatileCacheOptions by setting the newly added adm_policy option.\r\n* Add a column family option `memtable_max_range_deletions` that limits the number of range deletions in a memtable. RocksDB will try to do an automatic flush after the limit is reached. (#11358)\r\n* Add PutEntity API in sst_file_writer\r\n* Add `timeout` in microsecond option to `WaitForCompactOptions` to allow timely termination of prolonged waiting in scenarios like recurring recoverable errors, such as out-of-space situations and continuous write streams that sustain ongoing flush and compactions\r\n* New statistics `rocksdb.file.read.{get|multiget|db.iterator|verify.checksum|verify.file.checksums}.micros` measure read time of block-based SST tables or blob files during db open, `Get()`, `MultiGet()`, using db iterator, `VerifyFileChecksums()` and `VerifyChecksum()`. They require stats level greater than `StatsLevel::kExceptDetailedTimers`.\r\n* Add close_db option to `WaitForCompactOptions` to call Close() after waiting is done.\r\n* Add a new compression option `CompressionOptions::checksum` for enabling ZSTD's checksum feature to detect corruption during decompression.\r\n\r\n### Public API Changes\r\n* Mark `Options::access_hint_on_compaction_start` related APIs as deprecated. See #11631 for alternative behavior.\r\n\r\n### Behavior Changes\r\n* Statistics `rocksdb.sst.read.micros` now includes time spent on multi read and async read into the file\r\n* For Universal Compaction users, periodic compaction (option `periodic_compaction_seconds`) will be set to 30 days by default if block based table is used.\r\n\r\n### Bug Fixes\r\n* Fix a bug in FileTTLBooster that can cause users with a large number of levels (more than 65) to see errors like \"runtime error: shift exponent .. is too large..\" (#11673).","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/123908572/reactions","total_count":5,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":5,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/122720054","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/122720054/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/122720054/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.5.4","id":122720054,"author":{"login":"hx235","id":83968999,"node_id":"MDQ6VXNlcjgzOTY4OTk5","avatar_url":"https://avatars.githubusercontent.com/u/83968999?v=4","gravatar_id":"","url":"https://api.github.com/users/hx235","html_url":"https://github.com/hx235","followers_url":"https://api.github.com/users/hx235/followers","following_url":"https://api.github.com/users/hx235/following{/other_user}","gists_url":"https://api.github.com/users/hx235/gists{/gist_id}","starred_url":"https://api.github.com/users/hx235/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hx235/subscriptions","organizations_url":"https://api.github.com/users/hx235/orgs","repos_url":"https://api.github.com/users/hx235/repos","events_url":"https://api.github.com/users/hx235/events{/privacy}","received_events_url":"https://api.github.com/users/hx235/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HUI82","tag_name":"v8.5.4","target_commitish":"main","name":"RocksDB 8.5.4","draft":false,"prerelease":false,"created_at":"2023-09-27T05:11:24Z","published_at":"2023-09-27T05:20:53Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.5.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.5.4","body":"## 8.5.4 (2023-09-26)\r\n### Bug Fixes\r\n* Fixed a bug where compaction read under non direct IO still falls back to RocksDB internal prefetching after file system's prefetching returns non-OK status other than `Status::NotSupported()`\r\n\r\n### Behavior Changes\r\n* For non direct IO, eliminate the file system prefetching attempt for compaction read when `Options::compaction_readahead_size` is 0","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/122720054/reactions","total_count":9,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":9,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/119649737","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/119649737/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/119649737/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.5.3","id":119649737,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HIbXJ","tag_name":"v8.5.3","target_commitish":"8.5.fb","name":"RocksDB 8.5.3","draft":false,"prerelease":false,"created_at":"2023-09-01T20:58:39Z","published_at":"2023-09-01T21:01:16Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.5.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.5.3","body":"Please note 8.5.1 includes a fix for a persisted database corruption in an unlikely edge case. Upgrading to a version including this fix, like this one, is highly recommended!\r\n\r\n## 8.5.3 (2023-09-01)\r\n### Bug Fixes\r\n* Fixed a race condition in `GenericRateLimiter` that could cause it to stop granting requests\r\n\r\n## 8.5.2 (2023-08-31)\r\n### Bug fixes\r\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\r\n\r\n## 8.5.1 (2023-08-31)\r\n### Bug fixes\r\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\r\n\r\n## 8.5.0 (2023-07-21)\r\n### Public API Changes\r\n* Removed recently added APIs `GeneralCache` and `MakeSharedGeneralCache()` as our plan changed to stop exposing a general-purpose cache interface. The old forms of these APIs, `Cache` and `NewLRUCache()`, are still available, although general-purpose caching support will be dropped eventually.\r\n\r\n### Behavior Changes\r\n* Option `periodic_compaction_seconds` no longer supports FIFO compaction: setting it has no effect on FIFO compactions. FIFO compaction users should only set option `ttl` instead.\r\n* Move prefetching responsibility to page cache for compaction read for non directIO use case\r\n\r\n### Performance Improvements\r\n* In case of direct_io, if buffer passed by callee is already aligned, RandomAccessFileRead::Read will avoid realloacting a new buffer, reducing memcpy and use already passed aligned buffer.\r\n* Small efficiency improvement to HyperClockCache by reducing chance of compiler-generated heap allocations\r\n\r\n### Bug Fixes\r\n* Fix use_after_free bug in async_io MultiReads when underlying FS enabled kFSBuffer. kFSBuffer is when underlying FS pass their own buffer instead of using RocksDB scratch in FSReadRequest. Right now it's an experimental feature.\r\n* Fix a bug in FileTTLBooster that can cause users with a large number of levels (more than 65) to see errors like \"runtime error: shift exponent .. is too large..\" (#11673).","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/119649737/reactions","total_count":18,"+1":17,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/119649247","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/119649247/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/119649247/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.4.4","id":119649247,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HIbPf","tag_name":"v8.4.4","target_commitish":"8.4.fb","name":"RocksDB 8.4.4","draft":false,"prerelease":false,"created_at":"2023-09-01T20:51:51Z","published_at":"2023-09-01T20:54:51Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.4.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.4.4","body":"## 8.4.4 (2023-09-01)\r\n### Bug Fixes\r\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\r\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\r\n* Fixed a race condition in `GenericRateLimiter` that could cause it to stop granting requests\r\n\r\n## 8.4.3 (2023-07-27)\r\n### Bug Fixes\r\n* Fix use_after_free bug in async_io MultiReads when underlying FS enabled kFSBuffer. kFSBuffer is when underlying FS pass their own buffer instead of using RocksDB scratch in FSReadRequest.\r\n\r\n## 8.4.0 (2023-06-26)\r\n### New Features\r\n* Add FSReadRequest::fs_scratch which is a data buffer allocated and provided by underlying FileSystem to RocksDB during reads, when FS wants to provide its own buffer with data instead of using RocksDB provided FSReadRequest::scratch. This can help in cpu optimization by avoiding copy from file system's buffer to RocksDB buffer. More details on how to use/enable it in file_system.h. Right now its supported only for MultiReads(async + sync) with non direct io.\r\n* Start logging non-zero user-defined timestamp sizes in WAL to signal user key format in subsequent records and use it during recovery. This change will break recovery from WAL files written by early versions that contain user-defined timestamps. The workaround is to ensure there are no WAL files to recover (i.e. by flushing before close) before upgrade.\r\n* Added new property \"rocksdb.obsolete-sst-files-size-property\" that reports the size of SST files that have become obsolete but have not yet been deleted or scheduled for deletion\r\n* Start to record the value of the flag `AdvancedColumnFamilyOptions.persist_user_defined_timestamps` in the Manifest and table properties for a SST file when it is created. And use the recorded flag when creating a table reader for the SST file. This flag is only explicitly record if it's false.\r\n* Add a new option OptimisticTransactionDBOptions::shared_lock_buckets that enables sharing mutexes for validating transactions between DB instances, for better balancing memory efficiency and validation contention across DB instances. Different column families and DBs also now use different hash seeds in this validation, so that the same set of key names will not contend across DBs or column families.\r\n* Add a new ticker `rocksdb.files.marked.trash.deleted` to track the number of trash files deleted by background thread from the trash queue.\r\n* Add an API NewTieredVolatileCache() in include/rocksdb/cache.h to allocate an instance of a block cache with a primary block cache tier and a compressed secondary cache tier. A cache of this type distributes memory reservations against the block cache, such as WriteBufferManager, table reader memory etc., proportionally across both the primary and compressed secondary cache.\r\n* Add `WaitForCompact()` to wait for all flush and compactions jobs to finish. Jobs to wait include the unscheduled (queued, but not scheduled yet).\r\n* Add `WriteBatch::Release()` that releases the batch's serialized data to the caller.\r\n\r\n### Public API Changes\r\n* Add C API `rocksdb_options_add_compact_on_deletion_collector_factory_del_ratio`.\r\n* change the FileSystem::use_async_io() API to SupportedOps API in order to extend it to various operations supported by underlying FileSystem. Right now it contains FSSupportedOps::kAsyncIO and FSSupportedOps::kFSBuffer. More details about FSSupportedOps in filesystem.h\r\n* Add new tickers: `rocksdb.error.handler.bg.error.count`, `rocksdb.error.handler.bg.io.error.count`, `rocksdb.error.handler.bg.retryable.io.error.count` to replace the misspelled ones: `rocksdb.error.handler.bg.errro.count`, `rocksdb.error.handler.bg.io.errro.count`, `rocksdb.error.handler.bg.retryable.io.errro.count` ('error' instead of 'errro'). Users should switch to use the new tickers before 9.0 release as the misspelled old tickers will be completely removed then.\r\n* Overload the API CreateColumnFamilyWithImport() to support creating ColumnFamily by importing multiple ColumnFamilies It requires that CFs should not overlap in user key range.\r\n\r\n### Behavior Changes\r\n* Change the default value for option `level_compaction_dynamic_level_bytes` to true. This affects users who use leveled compaction and do not set this option explicitly. These users may see additional background compactions following DB open. These compactions help to shape the LSM according to `level_compaction_dynamic_level_bytes` such that the size of each level Ln is approximately size of Ln-1 * `max_bytes_for_level_multiplier`. Turning on this option has other benefits too: see more detail in wiki: https://github.com/facebook/rocksdb/wiki/Leveled-Compaction#option-level_compaction_dynamic_level_bytes-and-levels-target-size and in option comment in advanced_options.h (#11525).\r\n* For Leveled Compaction users, `CompactRange()` will now always try to compact to the last non-empty level. (#11468)\r\nFor Leveled Compaction users, `CompactRange()` with `bottommost_level_compaction = BottommostLevelCompaction::kIfHaveCompactionFilter` will behave similar to `kForceOptimized` in that it will skip files created during this manual compaction when compacting files in the bottommost level. (#11468)\r\n* RocksDB will try to drop range tombstones during non-bottommost compaction when it is safe to do so. (#11459)\r\n* When a DB is openend with `allow_ingest_behind=true` (currently only Universal compaction is supported), files in the last level, i.e. the ingested files,  will not be included in any compaction. (#11489)\r\n* Statistics `rocksdb.sst.read.micros` scope is expanded to all SST reads except for file ingestion and column family import (some compaction reads were previously excluded).\r\n\r\n### Bug Fixes\r\n* Reduced cases of illegally using Env::Default() during static destruction by never destroying the internal PosixEnv itself (except for builds checking for memory leaks). (#11538)\r\n* Fix extra prefetching during seek in async_io when BlockBasedTableOptions.num_file_reads_for_auto_readahead is 1 leading to extra reads than required.\r\n* Fix a bug where compactions that are qualified to be run as 2 subcompactions were only run as one subcompaction.\r\n* Fix a use-after-move bug in block.cc."},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/119648758","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/119648758/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/119648758/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.3.3","id":119648758,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HIbH2","tag_name":"v8.3.3","target_commitish":"8.3.fb","name":"RocksDB 8.3.3","draft":false,"prerelease":false,"created_at":"2023-09-01T20:45:29Z","published_at":"2023-09-01T20:48:11Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.3.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.3.3","body":"## 8.3.3 (2023-09-01)\r\n### Bug Fixes\r\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\r\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\r\n* Fixed a race condition in `GenericRateLimiter` that could cause it to stop granting requests"},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/109757185","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/109757185/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/109757185/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.3.2","id":109757185,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84GisMB","tag_name":"v8.3.2","target_commitish":"8.3.fb","name":"RocksDB 8.3.2","draft":false,"prerelease":false,"created_at":"2023-06-15T05:32:14Z","published_at":"2023-06-23T23:45:37Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.3.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.3.2","body":"## 8.3.2 (2023-06-14)\r\n### Bug Fixes\r\n* Reduced cases of illegally using Env::Default() during static destruction by never destroying the internal PosixEnv itself (except for builds checking for memory leaks). (#11538)\r\n\r\n## 8.3.1 (2023-06-07)\r\n### Performance Improvements\r\n* Fixed higher read QPS during DB::Open() reading files created prior to #11406, especially when reading many small file (size < 52 MB) during DB::Open() and partitioned filter or index is used.\r\n## 8.3.0 (2023-05-19)\r\n### New Features\r\n* Introduced a new option `block_protection_bytes_per_key`, which can be used to enable per key-value integrity protection for in-memory blocks in block cache (#11287).\r\n* Added `JemallocAllocatorOptions::num_arenas`. Setting `num_arenas > 1` may mitigate mutex contention in the allocator, particularly in scenarios where block allocations commonly bypass jemalloc tcache.\r\n* Improve the operational safety of publishing a DB or SST files to many hosts by using different block cache hash seeds on different hosts. The exact behavior is controlled by new option `ShardedCacheOptions::hash_seed`, which also documents the solved problem in more detail.\r\n* Introduced a new option `CompactionOptionsFIFO::file_temperature_age_thresholds` that allows FIFO compaction to compact files to different temperatures based on key age (#11428).\r\n* Added a new ticker stat to count how many times RocksDB detected a corruption while verifying a block checksum: `BLOCK_CHECKSUM_MISMATCH_COUNT`.\r\n* New statistics `rocksdb.file.read.db.open.micros` that measures read time of block-based SST tables or blob files during db open.\r\n* New statistics tickers for various iterator seek behaviors and relevant filtering, as \\*`_LEVEL_SEEK_`\\*. (#11460)\r\n### Public API Changes\r\n* EXPERIMENTAL: Add new API `DB::ClipColumnFamily` to clip the key in CF to a certain range. It will physically deletes all keys outside the range including tombstones.\r\n* Add `MakeSharedCache()` construction functions to various cache Options objects, and deprecated the `NewWhateverCache()` functions with long parameter lists.\r\n* Changed the meaning of various Bloom filter stats (prefix vs. whole key), with iterator-related filtering only being tracked in the new \\*`_LEVEL_SEEK_`\\*. stats. (#11460)\r\n### Behavior changes\r\n* For x86, CPU features are no longer detected at runtime nor in build scripts, but in source code using common preprocessor defines. This will likely unlock some small performance improvements on some newer hardware, but could hurt performance of the kCRC32c checksum, which is no longer the default, on some \"portable\" builds. See PR #11419 for details.\r\n### Bug Fixes\r\n* Delete an empty WAL file on DB open if the log number is less than the min log number to keep\r\n* Delete temp OPTIONS file on DB open if there is a failure to write it out or rename it\r\n### Performance Improvements\r\n* Improved the I/O efficiency of prefetching SST metadata by recording more information in the DB manifest. Opening files written with previous versions will still rely on heuristics for how much to prefetch (#11406).\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/109757185/reactions","total_count":9,"+1":7,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/100267127","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/100267127/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/100267127/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.1.1","id":100267127,"author":{"login":"ltamasi","id":47607618,"node_id":"MDQ6VXNlcjQ3NjA3NjE4","avatar_url":"https://avatars.githubusercontent.com/u/47607618?v=4","gravatar_id":"","url":"https://api.github.com/users/ltamasi","html_url":"https://github.com/ltamasi","followers_url":"https://api.github.com/users/ltamasi/followers","following_url":"https://api.github.com/users/ltamasi/following{/other_user}","gists_url":"https://api.github.com/users/ltamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ltamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ltamasi/subscriptions","organizations_url":"https://api.github.com/users/ltamasi/orgs","repos_url":"https://api.github.com/users/ltamasi/repos","events_url":"https://api.github.com/users/ltamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ltamasi/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84F-fR3","tag_name":"v8.1.1","target_commitish":"main","name":"RocksDB 8.1.1","draft":false,"prerelease":false,"created_at":"2023-04-20T21:55:51Z","published_at":"2023-04-20T22:02:38Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.1.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.1.1","body":"## 8.1.1 (2023-04-06)\r\n### Bug Fixes\r\n* In the DB::VerifyFileChecksums API, ensure that file system reads of SST files are equal to the readahead_size in ReadOptions, if specified. Previously, each read was 2x the readahead_size.\r\n\r\n## 8.1.0 (2023-03-18)\r\n### Behavior changes\r\n* Compaction output file cutting logic now considers range tombstone start keys. For example, SST partitioner now may receive ParitionRequest for range tombstone start keys.\r\n* If the async_io ReadOption is specified for MultiGet or NewIterator on a platform that doesn't support IO uring, the option is ignored and synchronous IO is used.\r\n\r\n### Bug Fixes\r\n* Fixed an issue for backward iteration when user defined timestamp is enabled in combination with BlobDB.\r\n* Fixed a couple of cases where a Merge operand encountered during iteration wasn't reflected in the `internal_merge_count` PerfContext counter.\r\n* Fixed a bug in CreateColumnFamilyWithImport()/ExportColumnFamily() which did not support range tombstones (#11252).\r\n* Fixed a bug where an excluded column family from an atomic flush contains unflushed data that should've been included in this atomic flush (i.e, data of seqno less than the max seqno of this atomic flush), leading to potential data loss in this excluded column family when `WriteOptions::disableWAL == true` (#11148).\r\n\r\n### New Features\r\n* Add statistics rocksdb.secondary.cache.filter.hits, rocksdb.secondary.cache.index.hits, and rocksdb.secondary.cache.filter.hits\r\n* Added a new PerfContext counter `internal_merge_point_lookup_count` which tracks the number of Merge operands applied while serving point lookup queries.\r\n* Add new statistics rocksdb.table.open.prefetch.tail.read.bytes, rocksdb.table.open.prefetch.tail.{miss|hit}\r\n* Add support for SecondaryCache with HyperClockCache (`HyperClockCacheOptions` inherits `secondary_cache` option from `ShardedCacheOptions`)\r\n* Add new db properties `rocksdb.cf-write-stall-stats`, `rocksdb.db-write-stall-stats`and APIs to examine them in a structured way. In particular, users of `GetMapProperty()` with property `kCFWriteStallStats`/`kDBWriteStallStats` can now use the functions in `WriteStallStatsMapKeys` to find stats in the map.\r\n\r\n### Public API Changes\r\n* Changed various functions and features in `Cache` that are mostly relevant to custom implementations or wrappers. Especially, asychronous lookup functionality is moved from `Lookup()` to a new `StartAsyncLookup()` function.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/100267127/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}}]